import{j as s,P as n,a as p,b as o,i as l}from"./component.Bs3R9e-f.js";import"./index.BbkJZrTS.js";const e={items:{branded:!1,typedErrors:!0,templateLiterals:!1,emailFormatAmbiguityIsAccountedFor:!1,acceptsTypedInput:!1,canGenerateJsonSchema:!1},explanations:{emailFormatAmbiguityIsAccountedFor:"Regex used in code, no disclaimer in docs"}},c=`<pre class="shiki vitesse-dark twoslash lsp" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#4D9375">import</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#BD976A">  </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">function</span><span style="color:#80A665"> array</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>(</span><span style="color:#BD976A">decoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">[]></span></code><div class="twoslash-popup-docs">Accepts arrays of whatever the given decoder accepts.</div></span>array</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#BD976A">  </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">function</span><span style="color:#80A665"> constant</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">C</span><span style="color:#CB7676"> extends</span><span style="color:#5DA994"> Scalar</span><span style="color:#666666">>(</span><span style="color:#BD976A">value</span><span style="color:#666666">: </span><span style="color:#5DA994">C</span><span style="color:#666666">):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">C</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Accepts only the given constant value.</div></span>constant</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#BD976A">  </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">interface</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">></span></code></span>Decoder</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#BD976A">  </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">type</span><span style="color:#5DA994"> DecodeResult</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">></span><span style="color:#666666"> =</span><span style="color:#5DA994"> Ok</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">></span><span style="color:#666666"> |</span><span style="color:#5DA994"> Err</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">Annotation</span><span style="color:#666666">></span></code></span>DecodeResult</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#BD976A">  </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">type</span><span style="color:#5DA994"> DecoderType</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">D</span><span style="color:#CB7676"> extends</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">any</span><span style="color:#666666">>></span><span style="color:#666666"> =</span><span style="color:#5DA994"> D</span><span style="color:#CB7676"> extends</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#CB7676">infer</span><span style="color:#5DA994"> T</span><span style="color:#666666">></span><span style="color:#CB7676"> ?</span><span style="color:#5DA994"> T</span><span style="color:#CB7676"> :</span><span style="color:#5DA994"> never</span></code><div class="twoslash-popup-docs">Helper type to return the output type of a Decoder.
Itâ€™s the inverse of Decoder&#x3C;T>.

You can use it at the type level:

  DecoderType&#x3C;Decoder&#x3C;string>>    // string
  DecoderType&#x3C;Decoder&#x3C;number[]>>  // number[]

Or on decoder instances, by using the \`typeof\` keyword:

  DecoderType&#x3C;typeof string>      // string
  DecoderType&#x3C;typeof truthy>      // boolean</div></span>DecoderType</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#BD976A">  </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">function</span><span style="color:#80A665"> either</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">TDecoders</span><span style="color:#CB7676"> extends</span><span style="color:#CB7676"> readonly</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">unknown</span><span style="color:#666666">>[]>(...</span><span style="color:#BD976A">decoders</span><span style="color:#666666">: </span><span style="color:#5DA994">TDecoders</span><span style="color:#666666">):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">DecoderType</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">TDecoders</span><span style="color:#666666">[</span><span style="color:#5DA994">number</span><span style="color:#666666">]>></span></code><div class="twoslash-popup-docs">Accepts values accepted by any of the given decoders.

The decoders are tried on the input one by one, in the given order. The
first one that accepts the input "wins". If all decoders reject the input,
the input gets rejected.</div></span>either</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#BD976A">  </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">email</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Accepts and returns strings that are syntactically valid email addresses.
(This will not mean that the email address actually exist.)</div></span>email</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#BD976A">  </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">iso8601</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">Date</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Accepts [ISO8601](https://en.wikipedia.org/wiki/ISO_8601)-formatted strings,
returns them as \`Date\` instances.

This is very useful for working with dates in APIs: serialize them as
\`.toISOString()\` when sending, decode them with \`iso8601\` when receiving.</div></span>iso8601</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#BD976A">  </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">function</span><span style="color:#80A665"> lazy</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>(</span><span style="color:#80A665">decoderFn</span><span style="color:#666666">: () => </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Lazily evaluate the given decoder. This is useful to build self-referential
types for recursive data structures.</div></span>lazy</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#BD976A">  </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">number</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">number</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Accepts finite numbers (can be integer or float values). Values \`NaN\`,
or positive and negative \`Infinity\` will get rejected.</div></span>number</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#BD976A">  </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">function</span><span style="color:#80A665"> object</span><span style="color:#666666">(</span><span style="color:#BD976A">decoders</span><span style="color:#666666">: </span><span style="color:#5DA994">Record</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">any</span><span style="color:#666666">, </span><span style="color:#5DA994">never</span><span style="color:#666666">>):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">Record</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">,</span><span style="color:#5DA994"> never</span><span style="color:#666666">>></span><span style="color:#666666"> (</span><span style="color:#DBD7CAEE">+</span><span style="color:#4C9A91">1</span><span style="color:#5DA994"> overload</span><span style="color:#666666">)</span></code><div class="twoslash-popup-docs">Accepts objects with fields matching the given decoders. Extra fields that
exist on the input object are ignored and will not be returned.</div></span>object</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#BD976A">  </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">function</span><span style="color:#80A665"> oneOf</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">C</span><span style="color:#CB7676"> extends</span><span style="color:#5DA994"> Scalar</span><span style="color:#666666">>(</span><span style="color:#BD976A">constants</span><span style="color:#666666">: </span><span style="color:#CB7676">readonly</span><span style="color:#5DA994"> C</span><span style="color:#666666">[]):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">C</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Accepts any value that is strictly-equal (using \`===\`) to one of the
specified values.</div></span>oneOf</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#BD976A">  </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">function</span><span style="color:#80A665"> regex</span><span style="color:#666666">(</span><span style="color:#BD976A">regex</span><span style="color:#666666">: </span><span style="color:#5DA994">RegExp</span><span style="color:#666666">,</span><span style="color:#BD976A"> msg</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Accepts and returns strings that match the given regular expression.</div></span>regex</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#BD976A">  </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">string</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Accepts and returns strings.</div></span>string</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#BD976A">  </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">function</span><span style="color:#80A665"> taggedUnion</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">O</span><span style="color:#CB7676"> extends</span><span style="color:#5DA994"> Record</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">,</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">unknown</span><span style="color:#666666">>>>(</span><span style="color:#BD976A">field</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">,</span><span style="color:#BD976A"> mapping</span><span style="color:#666666">: </span><span style="color:#5DA994">O</span><span style="color:#666666">):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">DecoderType</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">O</span><span style="color:#666666">[</span><span style="color:#CB7676">keyof</span><span style="color:#5DA994"> O</span><span style="color:#666666">]>></span></code><div class="twoslash-popup-docs">If you are decoding tagged unions you may want to use the \`taggedUnion()\`
decoder instead of the general purpose \`either()\` decoder to get better
error messages and better performance.

This decoder is optimized for [tagged
unions](https://en.wikipedia.org/wiki/Tagged_union), i.e. a union of
objects where one field is used as the discriminator.

\`\`\`ts
const A = object({ tag: constant('A'), foo: string });
const B = object({ tag: constant('B'), bar: number });

const AorB = taggedUnion('tag', { A, B });
//                        ^^^
\`\`\`

Decoding now works in two steps:

1. Look at the \`'tag'\` field in the incoming object (this is the field
   that decides which decoder will be used)
2. If the value is \`'A'\`, then decoder \`A\` will be used. If it's \`'B'\`, then
   decoder \`B\` will be used. Otherwise, this will fail.

This is effectively equivalent to \`either(A, B)\`, but will provide better
error messages and is more performant at runtime because it doesn't have to
try all decoders one by one.</div></span>taggedUnion</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#666666">}</span><span style="color:#4D9375"> from</span><span style="color:#C98A7D99"> '</span><span style="color:#C98A7D">decoders</span><span style="color:#C98A7D99">'</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#4D9375">import</span><span style="color:#666666"> {</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">COLOURS</span><span style="color:#666666">: </span><span style="color:#CB7676">readonly</span><span style="color:#666666"> [</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">red</span><span style="color:#C98A7D99">"</span><span style="color:#666666">, </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">green</span><span style="color:#C98A7D99">"</span><span style="color:#666666">, </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">blue</span><span style="color:#C98A7D99">"</span><span style="color:#666666">]</span></code></span>COLOURS</span></span><span style="color:#666666">,</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">type</span><span style="color:#5DA994"> Result</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">E</span><span style="color:#666666">,</span><span style="color:#5DA994"> T</span><span style="color:#666666">></span><span style="color:#666666"> =</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#BD976A">    _tag</span><span style="color:#666666">: </span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">left</span><span style="color:#C98A7D99">'</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    error</span><span style="color:#666666">: </span><span style="color:#5DA994">E</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}</span><span style="color:#666666"> |</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#BD976A">    _tag</span><span style="color:#666666">: </span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">right</span><span style="color:#C98A7D99">'</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    value</span><span style="color:#666666">: </span><span style="color:#5DA994">T</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}</span></span></code></pre></code></span>Result</span></span><span style="color:#666666">,</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">SUBSCRIPTION_TYPES</span><span style="color:#666666">: </span><span style="color:#CB7676">readonly</span><span style="color:#666666"> [</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">free</span><span style="color:#C98A7D99">"</span><span style="color:#666666">, </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">pro</span><span style="color:#C98A7D99">"</span><span style="color:#666666">, </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">enterprise</span><span style="color:#C98A7D99">"</span><span style="color:#666666">]</span></code></span>SUBSCRIPTION_TYPES</span></span><span style="color:#666666"> }</span><span style="color:#4D9375"> from</span><span style="color:#C98A7D99"> '</span><span style="color:#C98A7D">./libs/common/src/index</span><span style="color:#C98A7D99">'</span><span style="color:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">nonEmptyStringDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">></span></code></span>nonEmptyStringDecoder</span></span><span style="color:#666666"> =</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">string</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Accepts and returns strings.</div></span>string</span></span><span style="color:#666666">.</span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">string</span><span style="color:#666666">>.</span><span style="color:#80A665">refine</span><span style="color:#666666">(</span><span style="color:#BD976A">predicate</span><span style="color:#DBD7CAEE">: </span><span style="color:#666666">(</span><span style="color:#BD976A">value</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">)</span><span style="color:#666666"> =></span><span style="color:#BD976A"> boolean</span><span style="color:#666666">,</span><span style="color:#BD976A"> msg</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">string</span><span style="color:#666666">)</span><span style="color:#DBD7CAEE">: </span><span style="color:#80A665">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">></span><span style="color:#666666"> (</span><span style="color:#CB7676">+</span><span style="color:#4C9A91">1</span><span style="color:#BD976A"> overload</span><span style="color:#666666">)</span></code><div class="twoslash-popup-docs">Build a new decoder from the the current one, with an extra acceptance
criterium.</div></span>refine</span></span><span style="color:#666666">(</span></span>
<span class="line"><span style="color:#666666">  (</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">s</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span></code></span>s</span></span><span style="color:#666666">)</span><span style="color:#666666"> =></span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">s</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span></code></span>s</span></span><span style="color:#666666">.</span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#BD976A">String</span><span style="color:#666666">.</span><span style="color:#B8A965">length</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">number</span></code><div class="twoslash-popup-docs">Returns the length of a String object.</div></span>length</span></span><span style="color:#666666"> ></span><span style="color:#4C9A91"> 0</span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#C98A7D99">  '</span><span style="color:#C98A7D">Must be non-empty</span><span style="color:#C98A7D99">'</span></span>
<span class="line"><span style="color:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">subscriptionDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">free</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">pro</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">enterprise</span><span style="color:#C98A7D99">"</span><span style="color:#666666">></span></code></span>subscriptionDecoder</span></span><span style="color:#666666"> =</span><span style="color:#80A665"> </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">oneOf</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">free</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">pro</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">enterprise</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>(</span><span style="color:#BD976A">constants</span><span style="color:#DBD7CAEE">: </span><span style="color:#80A665">readonly</span><span style="color:#666666"> (</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">free</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">pro</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">enterprise</span><span style="color:#C98A7D99">"</span><span style="color:#666666">)[])</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">free</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">pro</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">enterprise</span><span style="color:#C98A7D99">"</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Accepts any value that is strictly-equal (using \`===\`) to one of the
specified values.</div></span>oneOf</span></span><span style="color:#666666">(</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">SUBSCRIPTION_TYPES</span><span style="color:#666666">: </span><span style="color:#CB7676">readonly</span><span style="color:#666666"> [</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">free</span><span style="color:#C98A7D99">"</span><span style="color:#666666">, </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">pro</span><span style="color:#C98A7D99">"</span><span style="color:#666666">, </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">enterprise</span><span style="color:#C98A7D99">"</span><span style="color:#666666">]</span></code></span>SUBSCRIPTION_TYPES</span></span><span style="color:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">stripeIdDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">></span></code></span>stripeIdDecoder</span></span><span style="color:#666666"> =</span><span style="color:#80A665"> </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">function</span><span style="color:#80A665"> regex</span><span style="color:#666666">(</span><span style="color:#BD976A">regex</span><span style="color:#666666">: </span><span style="color:#5DA994">RegExp</span><span style="color:#666666">,</span><span style="color:#BD976A"> msg</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Accepts and returns strings that match the given regular expression.</div></span>regex</span></span><span style="color:#666666">(</span></span>
<span class="line"><span style="color:#C98A7D99">  /</span><span style="color:#4D9375">^</span><span style="color:#C4704F">cus_</span><span style="color:#666666">[</span><span style="color:#C99076">a-zA-Z0-9</span><span style="color:#666666">]</span><span style="color:#4C9A91">{14,}</span><span style="color:#4D9375">$</span><span style="color:#C98A7D99">/</span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#C98A7D99">  '</span><span style="color:#C98A7D">Stripe id must be in the format cus_XXXXXXXXXXXXXX</span><span style="color:#C98A7D99">'</span></span>
<span class="line"><span style="color:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">integerDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">number</span><span style="color:#666666">></span></code></span>integerDecoder</span></span><span style="color:#666666"> =</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">number</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">number</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Accepts finite numbers (can be integer or float values). Values \`NaN\`,
or positive and negative \`Infinity\` will get rejected.</div></span>number</span></span><span style="color:#666666">.</span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">number</span><span style="color:#666666">>.</span><span style="color:#80A665">refine</span><span style="color:#666666">(</span><span style="color:#BD976A">predicate</span><span style="color:#DBD7CAEE">: </span><span style="color:#666666">(</span><span style="color:#BD976A">value</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">)</span><span style="color:#666666"> =></span><span style="color:#BD976A"> boolean</span><span style="color:#666666">,</span><span style="color:#BD976A"> msg</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">string</span><span style="color:#666666">)</span><span style="color:#DBD7CAEE">: </span><span style="color:#80A665">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">number</span><span style="color:#666666">></span><span style="color:#666666"> (</span><span style="color:#CB7676">+</span><span style="color:#4C9A91">1</span><span style="color:#BD976A"> overload</span><span style="color:#666666">)</span></code><div class="twoslash-popup-docs">Build a new decoder from the the current one, with an extra acceptance
criterium.</div></span>refine</span></span><span style="color:#666666">(</span></span>
<span class="line"><span style="color:#666666">  (</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">n</span><span style="color:#666666">:</span><span style="color:#BD976A"> number</span></code></span>n</span></span><span style="color:#666666">)</span><span style="color:#666666"> =></span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">var </span><span style="color:#BD976A">Number</span><span style="color:#666666">: </span><span style="color:#5DA994">NumberConstructor</span></code><div class="twoslash-popup-docs">An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers.</div></span>Number</span></span><span style="color:#666666">.</span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#BD976A">NumberConstructor</span><span style="color:#666666">.</span><span style="color:#80A665">isInteger</span><span style="color:#666666">(</span><span style="color:#BD976A">number</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">unknown</span><span style="color:#666666">)</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">boolean</span></code><div class="twoslash-popup-docs">Returns true if the value passed is an integer, false otherwise.</div><div class="twoslash-popup-docs twoslash-popup-docs-tags"><span class="twoslash-popup-docs-tag"><span class="twoslash-popup-docs-tag-name">@param</span><span class="twoslash-popup-docs-tag-value">number A numeric value.</span></span></div></span>isInteger</span></span><span style="color:#666666">(</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">n</span><span style="color:#666666">:</span><span style="color:#BD976A"> number</span></code></span>n</span></span><span style="color:#666666">),</span></span>
<span class="line"><span style="color:#C98A7D99">  '</span><span style="color:#C98A7D">Must be an integer</span><span style="color:#C98A7D99">'</span></span>
<span class="line"><span style="color:#666666">);</span></span>
<span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">nonNegativeDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">number</span><span style="color:#666666">></span></code></span>nonNegativeDecoder</span></span><span style="color:#666666"> =</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">number</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">number</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Accepts finite numbers (can be integer or float values). Values \`NaN\`,
or positive and negative \`Infinity\` will get rejected.</div></span>number</span></span><span style="color:#666666">.</span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">number</span><span style="color:#666666">>.</span><span style="color:#80A665">refine</span><span style="color:#666666">(</span><span style="color:#BD976A">predicate</span><span style="color:#DBD7CAEE">: </span><span style="color:#666666">(</span><span style="color:#BD976A">value</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">)</span><span style="color:#666666"> =></span><span style="color:#BD976A"> boolean</span><span style="color:#666666">,</span><span style="color:#BD976A"> msg</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">string</span><span style="color:#666666">)</span><span style="color:#DBD7CAEE">: </span><span style="color:#80A665">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">number</span><span style="color:#666666">></span><span style="color:#666666"> (</span><span style="color:#CB7676">+</span><span style="color:#4C9A91">1</span><span style="color:#BD976A"> overload</span><span style="color:#666666">)</span></code><div class="twoslash-popup-docs">Build a new decoder from the the current one, with an extra acceptance
criterium.</div></span>refine</span></span><span style="color:#666666">(</span></span>
<span class="line"><span style="color:#666666">  (</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">n</span><span style="color:#666666">:</span><span style="color:#BD976A"> number</span></code></span>n</span></span><span style="color:#666666">)</span><span style="color:#666666"> =></span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">n</span><span style="color:#666666">:</span><span style="color:#BD976A"> number</span></code></span>n</span></span><span style="color:#666666"> >=</span><span style="color:#4C9A91"> 0</span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#C98A7D99">  '</span><span style="color:#C98A7D">Must be a positive number</span><span style="color:#C98A7D99">'</span></span>
<span class="line"><span style="color:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD">// but no way to combine them, so let's repeat</span></span>
<span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">nonNegativeIntegerDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">number</span><span style="color:#666666">></span></code></span>nonNegativeIntegerDecoder</span></span><span style="color:#666666"> =</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">integerDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">number</span><span style="color:#666666">></span></code></span>integerDecoder</span></span><span style="color:#666666">.</span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">number</span><span style="color:#666666">>.</span><span style="color:#80A665">refine</span><span style="color:#666666">(</span><span style="color:#BD976A">predicate</span><span style="color:#DBD7CAEE">: </span><span style="color:#666666">(</span><span style="color:#BD976A">value</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">)</span><span style="color:#666666"> =></span><span style="color:#BD976A"> boolean</span><span style="color:#666666">,</span><span style="color:#BD976A"> msg</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">string</span><span style="color:#666666">)</span><span style="color:#DBD7CAEE">: </span><span style="color:#80A665">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">number</span><span style="color:#666666">></span><span style="color:#666666"> (</span><span style="color:#CB7676">+</span><span style="color:#4C9A91">1</span><span style="color:#BD976A"> overload</span><span style="color:#666666">)</span></code><div class="twoslash-popup-docs">Build a new decoder from the the current one, with an extra acceptance
criterium.</div></span>refine</span></span><span style="color:#666666">(</span></span>
<span class="line"><span style="color:#666666">  (</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">n</span><span style="color:#666666">:</span><span style="color:#BD976A"> number</span></code></span>n</span></span><span style="color:#666666">)</span><span style="color:#666666"> =></span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">n</span><span style="color:#666666">:</span><span style="color:#BD976A"> number</span></code></span>n</span></span><span style="color:#666666"> >=</span><span style="color:#4C9A91"> 0</span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#C98A7D99">  '</span><span style="color:#C98A7D">Must be a positive number</span><span style="color:#C98A7D99">'</span></span>
<span class="line"><span style="color:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">hexColourDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">></span></code></span>hexColourDecoder</span></span><span style="color:#666666"> =</span><span style="color:#80A665"> </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">function</span><span style="color:#80A665"> regex</span><span style="color:#666666">(</span><span style="color:#BD976A">regex</span><span style="color:#666666">: </span><span style="color:#5DA994">RegExp</span><span style="color:#666666">,</span><span style="color:#BD976A"> msg</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Accepts and returns strings that match the given regular expression.</div></span>regex</span></span><span style="color:#666666">(</span></span>
<span class="line"><span style="color:#C98A7D99">  /</span><span style="color:#4D9375">^</span><span style="color:#C4704F">#</span><span style="color:#666666">[</span><span style="color:#C99076">a-fA-F0-9</span><span style="color:#666666">]</span><span style="color:#4C9A91">{6}</span><span style="color:#4D9375">$</span><span style="color:#C98A7D99">/</span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#C98A7D99">  '</span><span style="color:#C98A7D">Hex colour must be in the format #RRGGBB</span><span style="color:#C98A7D99">'</span></span>
<span class="line"><span style="color:#666666">);</span></span>
<span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">colourDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">red</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">green</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">blue</span><span style="color:#C98A7D99">"</span><span style="color:#666666">></span></code></span>colourDecoder</span></span><span style="color:#666666"> =</span><span style="color:#80A665"> </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">oneOf</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">red</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">green</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">blue</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>(</span><span style="color:#BD976A">constants</span><span style="color:#DBD7CAEE">: </span><span style="color:#80A665">readonly</span><span style="color:#666666"> (</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">red</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">green</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">blue</span><span style="color:#C98A7D99">"</span><span style="color:#666666">)[])</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">red</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">green</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">blue</span><span style="color:#C98A7D99">"</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Accepts any value that is strictly-equal (using \`===\`) to one of the
specified values.</div></span>oneOf</span></span><span style="color:#666666">(</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">COLOURS</span><span style="color:#666666">: </span><span style="color:#CB7676">readonly</span><span style="color:#666666"> [</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">red</span><span style="color:#C98A7D99">"</span><span style="color:#666666">, </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">green</span><span style="color:#C98A7D99">"</span><span style="color:#666666">, </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">blue</span><span style="color:#C98A7D99">"</span><span style="color:#666666">]</span></code></span>COLOURS</span></span><span style="color:#666666">);</span></span>
<span class="line"><span style="color:#CB7676">const </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#80A665">uniqArray</span><span style="color:#666666">: &#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>(</span><span style="color:#BD976A">decoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>) => </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">[]></span></code></span>uniqArray</span></span><span style="color:#666666"> =</span><span style="color:#666666"> &#x3C;</span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">function</span><span style="color:#666666"> (</span><span style="color:#BD976A">type</span><span style="color:#BD976A"> parameter</span><span style="color:#666666">)</span><span style="color:#80A665"> T</span><span style="color:#80A665"> in</span><span style="color:#666666"> &#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>(</span><span style="color:#BD976A">decoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">[]></span></code></span>T</span></span><span style="color:#666666">>(</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">decoder</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">T</span><span style="color:#666666">></span></code></span>decoder</span></span><span style="color:#666666">: </span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">interface</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">></span></code></span>Decoder</span></span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">function</span><span style="color:#666666"> (</span><span style="color:#BD976A">type</span><span style="color:#BD976A"> parameter</span><span style="color:#666666">)</span><span style="color:#80A665"> T</span><span style="color:#80A665"> in</span><span style="color:#666666"> &#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>(</span><span style="color:#BD976A">decoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">[]></span></code></span>T</span></span><span style="color:#666666">>)</span><span style="color:#666666"> =></span></span>
<span class="line"><span style="color:#80A665">  </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">array</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>(</span><span style="color:#BD976A">decoder</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">T</span><span style="color:#666666">>)</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">T</span><span style="color:#666666">[]></span></code><div class="twoslash-popup-docs">Accepts arrays of whatever the given decoder accepts.</div></span>array</span></span><span style="color:#666666">(</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">decoder</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">T</span><span style="color:#666666">></span></code></span>decoder</span></span><span style="color:#666666">).</span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">T</span><span style="color:#666666">[]>.</span><span style="color:#80A665">refine</span><span style="color:#666666">(</span><span style="color:#BD976A">predicate</span><span style="color:#DBD7CAEE">: </span><span style="color:#666666">(</span><span style="color:#BD976A">value</span><span style="color:#666666">: </span><span style="color:#5DA994">T</span><span style="color:#666666">[])</span><span style="color:#666666"> =></span><span style="color:#BD976A"> boolean</span><span style="color:#666666">,</span><span style="color:#BD976A"> msg</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">string</span><span style="color:#666666">)</span><span style="color:#DBD7CAEE">: </span><span style="color:#80A665">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">[]></span><span style="color:#666666"> (</span><span style="color:#CB7676">+</span><span style="color:#4C9A91">1</span><span style="color:#BD976A"> overload</span><span style="color:#666666">)</span></code><div class="twoslash-popup-docs">Build a new decoder from the the current one, with an extra acceptance
criterium.</div></span>refine</span></span><span style="color:#666666">(</span></span>
<span class="line"><span style="color:#666666">    (</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">a</span><span style="color:#666666">:</span><span style="color:#BD976A"> T</span><span style="color:#666666">[]</span></code></span>a</span></span><span style="color:#666666">)</span><span style="color:#666666"> =></span><span style="color:#CB7676"> new </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">var </span><span style="color:#BD976A">Set</span><span style="color:#666666">: </span><span style="color:#5DA994">SetConstructor</span></span>
<span class="line"><span style="color:#CB7676">new</span><span style="color:#666666"> &#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>(</span><span style="color:#BD976A">iterable</span><span style="color:#CB7676">?</span><span style="color:#666666">: </span><span style="color:#5DA994">Iterable</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">> | </span><span style="color:#CB7676">null</span><span style="color:#666666"> | </span><span style="color:#CB7676">undefined</span><span style="color:#666666">)</span><span style="color:#666666"> =></span><span style="color:#80A665"> Set</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">></span><span style="color:#666666"> (</span><span style="color:#CB7676">+</span><span style="color:#4C9A91">1</span><span style="color:#BD976A"> overload</span><span style="color:#666666">)</span></span></code></pre></code></span>Set</span></span><span style="color:#666666">(</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">a</span><span style="color:#666666">:</span><span style="color:#BD976A"> T</span><span style="color:#666666">[]</span></code></span>a</span></span><span style="color:#666666">).</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#BD976A">Set</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">T</span><span style="color:#666666">>.</span><span style="color:#BD976A">size</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">number</span></code><div class="twoslash-popup-docs twoslash-popup-docs-tags"><span class="twoslash-popup-docs-tag"><span class="twoslash-popup-docs-tag-name">@returns</span><span class="twoslash-popup-docs-tag-value">the number of (unique) elements in Set.</span></span></div></span>size</span></span><span style="color:#CB7676"> === </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">a</span><span style="color:#666666">:</span><span style="color:#BD976A"> T</span><span style="color:#666666">[]</span></code></span>a</span></span><span style="color:#666666">.</span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#BD976A">Array</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">T</span><span style="color:#666666">>.</span><span style="color:#B8A965">length</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">number</span></code><div class="twoslash-popup-docs">Gets or sets the length of the array. This is a number one higher than the highest index in the array.</div></span>length</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#C98A7D99">    '</span><span style="color:#C98A7D">Expected unique items</span><span style="color:#C98A7D99">'</span></span>
<span class="line"><span style="color:#666666">  );</span></span>
<span class="line"><span style="color:#CB7676">const </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#80A665">setFromUniqArray</span><span style="color:#666666">: &#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>(</span><span style="color:#BD976A">decoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>) => </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">Set</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>></span></code></span>setFromUniqArray</span></span><span style="color:#666666"> =</span><span style="color:#666666"> &#x3C;</span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">function</span><span style="color:#666666"> (</span><span style="color:#BD976A">type</span><span style="color:#BD976A"> parameter</span><span style="color:#666666">)</span><span style="color:#80A665"> T</span><span style="color:#80A665"> in</span><span style="color:#666666"> &#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>(</span><span style="color:#BD976A">decoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">Set</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>></span></code></span>T</span></span><span style="color:#666666">>(</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">decoder</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">T</span><span style="color:#666666">></span></code></span>decoder</span></span><span style="color:#666666">: </span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">interface</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">></span></code></span>Decoder</span></span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">function</span><span style="color:#666666"> (</span><span style="color:#BD976A">type</span><span style="color:#BD976A"> parameter</span><span style="color:#666666">)</span><span style="color:#80A665"> T</span><span style="color:#80A665"> in</span><span style="color:#666666"> &#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>(</span><span style="color:#BD976A">decoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">Set</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>></span></code></span>T</span></span><span style="color:#666666">>)</span><span style="color:#666666"> =></span></span>
<span class="line"><span style="color:#80A665">  </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#80A665">uniqArray</span><span style="color:#666666">: &#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>(</span><span style="color:#BD976A">decoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>) => </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">[]></span></code></span>uniqArray</span></span><span style="color:#666666">(</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">decoder</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">T</span><span style="color:#666666">></span></code></span>decoder</span></span><span style="color:#666666">).</span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">T</span><span style="color:#666666">[]>.</span><span style="color:#80A665">transform</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">Set</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>>(</span><span style="color:#BD976A">transformFn</span><span style="color:#DBD7CAEE">: </span><span style="color:#666666">(</span><span style="color:#BD976A">value</span><span style="color:#666666">: </span><span style="color:#5DA994">T</span><span style="color:#666666">[])</span><span style="color:#666666"> =></span><span style="color:#BD976A"> Set</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">T</span><span style="color:#666666">>)</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">Set</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">T</span><span style="color:#CB7676">>></span></code><div class="twoslash-popup-docs">Build a new decoder from the current one, modifying its outputted value.</div></span>transform</span></span><span style="color:#666666">((</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">a</span><span style="color:#666666">:</span><span style="color:#BD976A"> T</span><span style="color:#666666">[]</span></code></span>a</span></span><span style="color:#666666">)</span><span style="color:#666666"> =></span><span style="color:#CB7676"> new </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">var </span><span style="color:#BD976A">Set</span><span style="color:#666666">: </span><span style="color:#5DA994">SetConstructor</span></span>
<span class="line"><span style="color:#CB7676">new</span><span style="color:#666666"> &#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>(</span><span style="color:#BD976A">iterable</span><span style="color:#CB7676">?</span><span style="color:#666666">: </span><span style="color:#5DA994">Iterable</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">> | </span><span style="color:#CB7676">null</span><span style="color:#666666"> | </span><span style="color:#CB7676">undefined</span><span style="color:#666666">)</span><span style="color:#666666"> =></span><span style="color:#80A665"> Set</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">></span><span style="color:#666666"> (</span><span style="color:#CB7676">+</span><span style="color:#4C9A91">1</span><span style="color:#BD976A"> overload</span><span style="color:#666666">)</span></span></code></pre></code></span>Set</span></span><span style="color:#666666">(</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">a</span><span style="color:#666666">:</span><span style="color:#BD976A"> T</span><span style="color:#666666">[]</span></code></span>a</span></span><span style="color:#666666">));</span></span>
<span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">favouriteColoursDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">Set</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>></span></code></span>favouriteColoursDecoder</span></span><span style="color:#666666"> =</span><span style="color:#80A665"> </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#80A665">setFromUniqArray</span><span style="color:#666666">: &#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>(</span><span style="color:#BD976A">decoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>) => </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">Set</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>></span></code></span>setFromUniqArray</span></span><span style="color:#666666">(</span></span>
<span class="line"><span style="color:#80A665">  </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">either</span><span style="color:#666666">&#x3C;[</span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>,</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">red</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">green</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">blue</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>]>(</span><span style="color:#BD976A">decoders_0</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">string</span><span style="color:#666666">>,</span><span style="color:#BD976A"> decoders_1</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">red</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">green</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">blue</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>)</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;...></span></code><div class="twoslash-popup-docs">Accepts values accepted by any of the given decoders.

The decoders are tried on the input one by one, in the given order. The
first one that accepts the input "wins". If all decoders reject the input,
the input gets rejected.</div></span>either</span></span><span style="color:#666666">(</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">hexColourDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">></span></code></span>hexColourDecoder</span></span><span style="color:#666666">,</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">colourDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">red</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">green</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">blue</span><span style="color:#C98A7D99">"</span><span style="color:#666666">></span></code></span>colourDecoder</span></span><span style="color:#666666">)</span></span>
<span class="line"><span style="color:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD">// note that "type" has a typo in it purposely; it shows that the lib allows to write arbitrary values here, so the feature is JS-only, it doesn't work in Typescript</span></span>
<span class="line"><span style="color:#758575DD">// https://github.com/nvie/decoders/issues/1153</span></span>
<span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A">profileDecoder0</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    boughtTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">} | {</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">artist</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    publishedTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}></span></span></code></pre></code></span>profileDecoder0</span></span><span style="color:#666666"> =</span><span style="color:#80A665"> </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#80A665">taggedUnion</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    listener</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">        type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">        boughtTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">    }>;</span></span>
<span class="line"><span style="color:#BD976A">    artist</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">        type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">artist</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">        publishedTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">    }>;</span></span>
<span class="line"><span style="color:#666666">}>(</span><span style="color:#BD976A">field</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">,</span><span style="color:#BD976A"> mapping</span><span style="color:#666666">: {</span></span>
<span class="line"><span style="color:#BD976A">    listener</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">        type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">        boughtTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">    }>;</span></span>
<span class="line"><span style="color:#BD976A">    artist</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;...>;</span></span>
<span class="line"><span style="color:#666666">}):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#DBD7CAEE">...</span><span style="color:#666666">></span></span></code></pre></code><div class="twoslash-popup-docs">If you are decoding tagged unions you may want to use the \`taggedUnion()\`
decoder instead of the general purpose \`either()\` decoder to get better
error messages and better performance.

This decoder is optimized for [tagged
unions](https://en.wikipedia.org/wiki/Tagged_union), i.e. a union of
objects where one field is used as the discriminator.

\`\`\`ts
const A = object({ tag: constant('A'), foo: string });
const B = object({ tag: constant('B'), bar: number });

const AorB = taggedUnion('tag', { A, B });
//                        ^^^
\`\`\`

Decoding now works in two steps:

1. Look at the \`'tag'\` field in the incoming object (this is the field
   that decides which decoder will be used)
2. If the value is \`'A'\`, then decoder \`A\` will be used. If it's \`'B'\`, then
   decoder \`B\` will be used. Otherwise, this will fail.

This is effectively equivalent to \`either(A, B)\`, but will provide better
error messages and is more performant at runtime because it doesn't have to
try all decoders one by one.</div></span>taggedUnion</span></span><span style="color:#666666">(</span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">tÑƒpe</span><span style="color:#C98A7D99">'</span><span style="color:#666666">,</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#B8A965">  </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#80A665">listener</span><span style="color:#666666">:</span><span style="color:#80A665"> Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    boughtTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}></span></span></code></pre></code></span>listener</span></span><span style="color:#666666">: </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#80A665">object</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    boughtTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">number</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#666666">}>(</span><span style="color:#BD976A">decoders</span><span style="color:#666666">: {</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    boughtTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">number</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#666666">}):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    boughtTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}></span><span style="color:#666666"> (</span><span style="color:#DBD7CAEE">+</span><span style="color:#4C9A91">1</span><span style="color:#5DA994"> overload</span><span style="color:#666666">)</span></span></code></pre></code><div class="twoslash-popup-docs">Accepts objects with fields matching the given decoders. Extra fields that
exist on the input object are ignored and will not be returned.</div></span>object</span></span><span style="color:#666666">({</span></span>
<span class="line"><span style="color:#B8A965">    </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">type</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">"</span><span style="color:#666666">></span></code></span>type</span></span><span style="color:#666666">: </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">constant</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>(</span><span style="color:#BD976A">value</span><span style="color:#DBD7CAEE">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">"</span><span style="color:#666666">)</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">"</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Accepts only the given constant value.</div></span>constant</span></span><span style="color:#666666">(</span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">'</span><span style="color:#666666">),</span></span>
<span class="line"><span style="color:#B8A965">    </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">boughtTracks</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">number</span><span style="color:#666666">></span></code></span>boughtTracks</span></span><span style="color:#666666">: </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">nonNegativeIntegerDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">number</span><span style="color:#666666">></span></code></span>nonNegativeIntegerDecoder</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#666666">  }),</span></span>
<span class="line"><span style="color:#B8A965">  </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#80A665">artist</span><span style="color:#666666">:</span><span style="color:#80A665"> Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">artist</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    publishedTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}></span></span></code></pre></code></span>artist</span></span><span style="color:#666666">: </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#80A665">object</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">artist</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    publishedTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">number</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#666666">}>(</span><span style="color:#BD976A">decoders</span><span style="color:#666666">: {</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">artist</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    publishedTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">number</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#666666">}):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#666666">    ...;</span></span>
<span class="line"><span style="color:#666666">}></span><span style="color:#666666"> (</span><span style="color:#DBD7CAEE">+</span><span style="color:#4C9A91">1</span><span style="color:#5DA994"> overload</span><span style="color:#666666">)</span></span></code></pre></code><div class="twoslash-popup-docs">Accepts objects with fields matching the given decoders. Extra fields that
exist on the input object are ignored and will not be returned.</div></span>object</span></span><span style="color:#666666">({</span></span>
<span class="line"><span style="color:#B8A965">    </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">type</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">artist</span><span style="color:#C98A7D99">"</span><span style="color:#666666">></span></code></span>type</span></span><span style="color:#666666">: </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">constant</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">artist</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>(</span><span style="color:#BD976A">value</span><span style="color:#DBD7CAEE">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">artist</span><span style="color:#C98A7D99">"</span><span style="color:#666666">)</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">artist</span><span style="color:#C98A7D99">"</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Accepts only the given constant value.</div></span>constant</span></span><span style="color:#666666">(</span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">artist</span><span style="color:#C98A7D99">'</span><span style="color:#666666">),</span></span>
<span class="line"><span style="color:#B8A965">    </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">publishedTracks</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">number</span><span style="color:#666666">></span></code></span>publishedTracks</span></span><span style="color:#666666">: </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">nonNegativeIntegerDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">number</span><span style="color:#666666">></span></code></span>nonNegativeIntegerDecoder</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#666666">  }),</span></span>
<span class="line"><span style="color:#666666">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A">profileDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    boughtTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">} | {</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">artist</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    publishedTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}></span></span></code></pre></code></span>profileDecoder</span></span><span style="color:#666666"> =</span><span style="color:#80A665"> </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#BD976A">either</span><span style="color:#666666">&#x3C;[</span><span style="color:#80A665">Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    boughtTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}>,</span><span style="color:#80A665"> Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">artist</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    publishedTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}>]>(</span><span style="color:#BD976A">decoders_0</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    boughtTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}>,</span><span style="color:#BD976A"> decoders_1</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;...>):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#DBD7CAEE">...</span><span style="color:#666666">></span></span></code></pre></code><div class="twoslash-popup-docs">Accepts values accepted by any of the given decoders.

The decoders are tried on the input one by one, in the given order. The
first one that accepts the input "wins". If all decoders reject the input,
the input gets rejected.</div></span>either</span></span><span style="color:#666666">(</span></span>
<span class="line"><span style="color:#80A665">  </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#80A665">object</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    boughtTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">number</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#666666">}>(</span><span style="color:#BD976A">decoders</span><span style="color:#666666">: {</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    boughtTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">number</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#666666">}):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    boughtTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}></span><span style="color:#666666"> (</span><span style="color:#DBD7CAEE">+</span><span style="color:#4C9A91">1</span><span style="color:#5DA994"> overload</span><span style="color:#666666">)</span></span></code></pre></code><div class="twoslash-popup-docs">Accepts objects with fields matching the given decoders. Extra fields that
exist on the input object are ignored and will not be returned.</div></span>object</span></span><span style="color:#666666">({</span></span>
<span class="line"><span style="color:#B8A965">    </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">type</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">"</span><span style="color:#666666">></span></code></span>type</span></span><span style="color:#666666">: </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">constant</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>(</span><span style="color:#BD976A">value</span><span style="color:#DBD7CAEE">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">"</span><span style="color:#666666">)</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">"</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Accepts only the given constant value.</div></span>constant</span></span><span style="color:#666666">(</span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">'</span><span style="color:#666666">),</span></span>
<span class="line"><span style="color:#B8A965">    </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">boughtTracks</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">number</span><span style="color:#666666">></span></code></span>boughtTracks</span></span><span style="color:#666666">: </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">nonNegativeIntegerDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">number</span><span style="color:#666666">></span></code></span>nonNegativeIntegerDecoder</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#666666">  }),</span></span>
<span class="line"><span style="color:#80A665">  </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#80A665">object</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">artist</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    publishedTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">number</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#666666">}>(</span><span style="color:#BD976A">decoders</span><span style="color:#666666">: {</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">artist</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    publishedTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">number</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#666666">}):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#666666">    ...;</span></span>
<span class="line"><span style="color:#666666">}></span><span style="color:#666666"> (</span><span style="color:#DBD7CAEE">+</span><span style="color:#4C9A91">1</span><span style="color:#5DA994"> overload</span><span style="color:#666666">)</span></span></code></pre></code><div class="twoslash-popup-docs">Accepts objects with fields matching the given decoders. Extra fields that
exist on the input object are ignored and will not be returned.</div></span>object</span></span><span style="color:#666666">({</span></span>
<span class="line"><span style="color:#B8A965">    </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">type</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">artist</span><span style="color:#C98A7D99">"</span><span style="color:#666666">></span></code></span>type</span></span><span style="color:#666666">: </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">constant</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">artist</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>(</span><span style="color:#BD976A">value</span><span style="color:#DBD7CAEE">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">artist</span><span style="color:#C98A7D99">"</span><span style="color:#666666">)</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">artist</span><span style="color:#C98A7D99">"</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Accepts only the given constant value.</div></span>constant</span></span><span style="color:#666666">(</span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">artist</span><span style="color:#C98A7D99">'</span><span style="color:#666666">),</span></span>
<span class="line"><span style="color:#B8A965">    </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">publishedTracks</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">number</span><span style="color:#666666">></span></code></span>publishedTracks</span></span><span style="color:#666666">: </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">nonNegativeIntegerDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">number</span><span style="color:#666666">></span></code></span>nonNegativeIntegerDecoder</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#666666">  })</span></span>
<span class="line"><span style="color:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676">type</span><span style="color:#5DA994"> </span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">type</span><span style="color:#5DA994"> FileSystem</span><span style="color:#666666"> =</span><span style="color:#666666"> ({</span></span>
<span class="line"><span style="color:#CB7676">    readonly</span><span style="color:#BD976A"> type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">'</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#CB7676">    readonly</span><span style="color:#BD976A"> children</span><span style="color:#666666">: </span><span style="color:#CB7676">readonly</span><span style="color:#5DA994"> FileSystem</span><span style="color:#666666">[];</span></span>
<span class="line"><span style="color:#666666">}</span><span style="color:#666666"> |</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#CB7676">    readonly</span><span style="color:#BD976A"> type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">'</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">})</span><span style="color:#666666"> &#x26;</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#CB7676">    readonly</span><span style="color:#BD976A"> name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}</span></span></code></pre></code></span>FileSystem</span></span><span style="color:#666666"> =</span><span style="color:#666666"> (</span></span>
<span class="line"><span style="color:#666666">  |</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#CB7676">      readonly</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">type</span><span style="color:#666666">:</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">"</span></code></span>type</span></span><span style="color:#666666">: </span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">'</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#CB7676">      readonly</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">children</span><span style="color:#666666">:</span><span style="color:#BD976A"> readonly</span><span style="color:#BD976A"> FileSystem</span><span style="color:#666666">[]</span></code></span>children</span></span><span style="color:#666666">: </span><span style="color:#CB7676">readonly</span><span style="color:#5DA994"> </span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">type</span><span style="color:#5DA994"> FileSystem</span><span style="color:#666666"> =</span><span style="color:#666666"> ({</span></span>
<span class="line"><span style="color:#CB7676">    readonly</span><span style="color:#BD976A"> type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">'</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#CB7676">    readonly</span><span style="color:#BD976A"> children</span><span style="color:#666666">: </span><span style="color:#CB7676">readonly</span><span style="color:#5DA994"> FileSystem</span><span style="color:#666666">[];</span></span>
<span class="line"><span style="color:#666666">}</span><span style="color:#666666"> |</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#CB7676">    readonly</span><span style="color:#BD976A"> type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">'</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">})</span><span style="color:#666666"> &#x26;</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#CB7676">    readonly</span><span style="color:#BD976A"> name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}</span></span></code></pre></code></span>FileSystem</span></span><span style="color:#666666">[];</span></span>
<span class="line"><span style="color:#666666">    }</span></span>
<span class="line"><span style="color:#666666">  |</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#CB7676">      readonly</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">type</span><span style="color:#666666">:</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">"</span></code></span>type</span></span><span style="color:#666666">: </span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">'</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">    }</span></span>
<span class="line"><span style="color:#666666">)</span><span style="color:#666666"> &#x26;</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#CB7676">  readonly</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">name</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span></code></span>name</span></span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">fileSystemDecoder0</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">></span></code></span>fileSystemDecoder0</span></span><span style="color:#666666">: </span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">interface</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">></span></code></span>Decoder</span></span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">type</span><span style="color:#5DA994"> FileSystem</span><span style="color:#666666"> =</span><span style="color:#666666"> ({</span></span>
<span class="line"><span style="color:#CB7676">    readonly</span><span style="color:#BD976A"> type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">'</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#CB7676">    readonly</span><span style="color:#BD976A"> children</span><span style="color:#666666">: </span><span style="color:#CB7676">readonly</span><span style="color:#5DA994"> FileSystem</span><span style="color:#666666">[];</span></span>
<span class="line"><span style="color:#666666">}</span><span style="color:#666666"> |</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#CB7676">    readonly</span><span style="color:#BD976A"> type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">'</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">})</span><span style="color:#666666"> &#x26;</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#CB7676">    readonly</span><span style="color:#BD976A"> name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}</span></span></code></pre></code></span>FileSystem</span></span><span style="color:#666666">> =</span><span style="color:#80A665"> </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#80A665">lazy</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    children</span><span style="color:#666666">: </span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">[];</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}</span><span style="color:#666666"> |</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}>(</span><span style="color:#80A665">decoderFn</span><span style="color:#666666">: () => </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    children</span><span style="color:#666666">: </span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">[];</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">} | {</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}>):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#DBD7CAEE">...</span><span style="color:#666666">></span></span></code></pre></code><div class="twoslash-popup-docs">Lazily evaluate the given decoder. This is useful to build self-referential
types for recursive data structures.</div></span>lazy</span></span><span style="color:#666666">(()</span><span style="color:#666666"> =></span></span>
<span class="line"><span style="color:#80A665">  </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#80A665">taggedUnion</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    directory</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">        type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">        children</span><span style="color:#666666">: </span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">[];</span></span>
<span class="line"><span style="color:#BD976A">        name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">    }>;</span></span>
<span class="line"><span style="color:#BD976A">    file</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">        type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">        name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">    }>;</span></span>
<span class="line"><span style="color:#666666">}>(</span><span style="color:#BD976A">field</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">,</span><span style="color:#BD976A"> mapping</span><span style="color:#666666">: {</span></span>
<span class="line"><span style="color:#BD976A">    directory</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;...>;</span></span>
<span class="line"><span style="color:#BD976A">    file</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;...>;</span></span>
<span class="line"><span style="color:#666666">}):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#DBD7CAEE">...</span><span style="color:#666666">></span></span></code></pre></code><div class="twoslash-popup-docs">If you are decoding tagged unions you may want to use the \`taggedUnion()\`
decoder instead of the general purpose \`either()\` decoder to get better
error messages and better performance.

This decoder is optimized for [tagged
unions](https://en.wikipedia.org/wiki/Tagged_union), i.e. a union of
objects where one field is used as the discriminator.

\`\`\`ts
const A = object({ tag: constant('A'), foo: string });
const B = object({ tag: constant('B'), bar: number });

const AorB = taggedUnion('tag', { A, B });
//                        ^^^
\`\`\`

Decoding now works in two steps:

1. Look at the \`'tag'\` field in the incoming object (this is the field
   that decides which decoder will be used)
2. If the value is \`'A'\`, then decoder \`A\` will be used. If it's \`'B'\`, then
   decoder \`B\` will be used. Otherwise, this will fail.

This is effectively equivalent to \`either(A, B)\`, but will provide better
error messages and is more performant at runtime because it doesn't have to
try all decoders one by one.</div></span>taggedUnion</span></span><span style="color:#666666">(</span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">type</span><span style="color:#C98A7D99">'</span><span style="color:#666666">,</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#B8A965">    </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#80A665">directory</span><span style="color:#666666">:</span><span style="color:#80A665"> Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    children</span><span style="color:#666666">: </span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">[];</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}></span></span></code></pre></code></span>directory</span></span><span style="color:#666666">: </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#80A665">object</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    children</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">[]>;</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#666666">}>(</span><span style="color:#BD976A">decoders</span><span style="color:#666666">: {</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    children</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">[]>;</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;...>;</span></span>
<span class="line"><span style="color:#666666">}):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#DBD7CAEE">...</span><span style="color:#666666">></span><span style="color:#666666"> (</span><span style="color:#DBD7CAEE">+</span><span style="color:#4C9A91">1</span><span style="color:#5DA994"> overload</span><span style="color:#666666">)</span></span></code></pre></code><div class="twoslash-popup-docs">Accepts objects with fields matching the given decoders. Extra fields that
exist on the input object are ignored and will not be returned.</div></span>object</span></span><span style="color:#666666">({</span></span>
<span class="line"><span style="color:#B8A965">      </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">type</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">"</span><span style="color:#666666">></span></code></span>type</span></span><span style="color:#666666">: </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">constant</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>(</span><span style="color:#BD976A">value</span><span style="color:#DBD7CAEE">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">"</span><span style="color:#666666">)</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">"</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Accepts only the given constant value.</div></span>constant</span></span><span style="color:#666666">(</span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">'</span><span style="color:#666666">),</span></span>
<span class="line"><span style="color:#B8A965">      </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">children</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">FileSystem</span><span style="color:#666666">[]></span></code></span>children</span></span><span style="color:#666666">: </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">array</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">>(</span><span style="color:#BD976A">decoder</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">FileSystem</span><span style="color:#666666">>)</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">FileSystem</span><span style="color:#666666">[]></span></code><div class="twoslash-popup-docs">Accepts arrays of whatever the given decoder accepts.</div></span>array</span></span><span style="color:#666666">(</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">fileSystemDecoder0</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">></span></code></span>fileSystemDecoder0</span></span><span style="color:#666666">).</span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">FileSystem</span><span style="color:#666666">[]>.</span><span style="color:#80A665">refine</span><span style="color:#666666">(</span><span style="color:#BD976A">predicate</span><span style="color:#DBD7CAEE">: </span><span style="color:#666666">(</span><span style="color:#BD976A">value</span><span style="color:#666666">: </span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">[])</span><span style="color:#666666"> =></span><span style="color:#BD976A"> boolean</span><span style="color:#666666">,</span><span style="color:#BD976A"> msg</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">string</span><span style="color:#666666">)</span><span style="color:#DBD7CAEE">: </span><span style="color:#80A665">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">[]></span><span style="color:#666666"> (</span><span style="color:#CB7676">+</span><span style="color:#4C9A91">1</span><span style="color:#BD976A"> overload</span><span style="color:#666666">)</span></code><div class="twoslash-popup-docs">Build a new decoder from the the current one, with an extra acceptance
criterium.</div></span>refine</span></span><span style="color:#666666">(</span></span>
<span class="line"><span style="color:#666666">        (</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">a</span><span style="color:#666666">:</span><span style="color:#BD976A"> FileSystem</span><span style="color:#666666">[]</span></code></span>a</span></span><span style="color:#666666">) => </span><span style="color:#CB7676">new</span><span style="color:#80A665"> </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">var </span><span style="color:#BD976A">Set</span><span style="color:#666666">: </span><span style="color:#5DA994">SetConstructor</span></span>
<span class="line"><span style="color:#CB7676">new</span><span style="color:#666666"> &#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>(</span><span style="color:#BD976A">iterable</span><span style="color:#CB7676">?</span><span style="color:#666666">: </span><span style="color:#5DA994">Iterable</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">> | </span><span style="color:#CB7676">null</span><span style="color:#666666"> | </span><span style="color:#CB7676">undefined</span><span style="color:#666666">)</span><span style="color:#666666"> =></span><span style="color:#80A665"> Set</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">></span><span style="color:#666666"> (</span><span style="color:#CB7676">+</span><span style="color:#4C9A91">1</span><span style="color:#BD976A"> overload</span><span style="color:#666666">)</span></span></code></pre></code></span>Set</span></span><span style="color:#666666">(</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">a</span><span style="color:#666666">:</span><span style="color:#BD976A"> FileSystem</span><span style="color:#666666">[]</span></code></span>a</span></span><span style="color:#666666">.</span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#BD976A">Array</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">FileSystem</span><span style="color:#666666">>.</span><span style="color:#80A665">map</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>(</span><span style="color:#BD976A">callbackfn</span><span style="color:#DBD7CAEE">: </span><span style="color:#666666">(</span><span style="color:#BD976A">value</span><span style="color:#666666">: </span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">,</span><span style="color:#BD976A"> index</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">,</span><span style="color:#BD976A"> array</span><span style="color:#666666">: </span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">[])</span><span style="color:#666666"> =></span><span style="color:#BD976A"> string</span><span style="color:#666666">,</span><span style="color:#BD976A"> thisArg</span><span style="color:#CB7676">?:</span><span style="color:#BD976A"> any</span><span style="color:#666666">)</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">string</span><span style="color:#666666">[]</span></code><div class="twoslash-popup-docs">Calls a defined callback function on each element of an array, and returns an array that contains the results.</div><div class="twoslash-popup-docs twoslash-popup-docs-tags"><span class="twoslash-popup-docs-tag"><span class="twoslash-popup-docs-tag-name">@param</span><span class="twoslash-popup-docs-tag-value">callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.</span></span><span class="twoslash-popup-docs-tag"><span class="twoslash-popup-docs-tag-name">@param</span><span class="twoslash-popup-docs-tag-value">thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.</span></span></div></span>map</span></span><span style="color:#666666">((</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">f</span><span style="color:#666666">:</span><span style="color:#BD976A"> FileSystem</span></code></span>f</span></span><span style="color:#666666">) => </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">f</span><span style="color:#666666">:</span><span style="color:#BD976A"> FileSystem</span></code></span>f</span></span><span style="color:#666666">.</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">name</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span></code></span>name</span></span><span style="color:#666666">)).</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#BD976A">Set</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">T</span><span style="color:#666666">>.</span><span style="color:#BD976A">size</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">number</span></code><div class="twoslash-popup-docs twoslash-popup-docs-tags"><span class="twoslash-popup-docs-tag"><span class="twoslash-popup-docs-tag-name">@returns</span><span class="twoslash-popup-docs-tag-value">the number of (unique) elements in Set.</span></span></div></span>size</span></span><span style="color:#CB7676"> ===</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">a</span><span style="color:#666666">:</span><span style="color:#BD976A"> FileSystem</span><span style="color:#666666">[]</span></code></span>a</span></span><span style="color:#666666">.</span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#BD976A">Array</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">T</span><span style="color:#666666">>.</span><span style="color:#B8A965">length</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">number</span></code><div class="twoslash-popup-docs">Gets or sets the length of the array. This is a number one higher than the highest index in the array.</div></span>length</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#C98A7D99">        '</span><span style="color:#C98A7D">Expected unique names in the children</span><span style="color:#C98A7D99">'</span></span>
<span class="line"><span style="color:#666666">      ),</span></span>
<span class="line"><span style="color:#758575DD">      // no composability; have to repeat</span></span>
<span class="line"><span style="color:#B8A965">      </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">name</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">string</span><span style="color:#666666">></span></code></span>name</span></span><span style="color:#666666">: </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">nonEmptyStringDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">></span></code></span>nonEmptyStringDecoder</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#666666">    }),</span></span>
<span class="line"><span style="color:#B8A965">    </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#80A665">file</span><span style="color:#666666">:</span><span style="color:#80A665"> Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}></span></span></code></pre></code></span>file</span></span><span style="color:#666666">: </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#80A665">object</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#666666">}>(</span><span style="color:#BD976A">decoders</span><span style="color:#666666">: {</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#666666">}):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}></span><span style="color:#666666"> (</span><span style="color:#DBD7CAEE">+</span><span style="color:#4C9A91">1</span><span style="color:#5DA994"> overload</span><span style="color:#666666">)</span></span></code></pre></code><div class="twoslash-popup-docs">Accepts objects with fields matching the given decoders. Extra fields that
exist on the input object are ignored and will not be returned.</div></span>object</span></span><span style="color:#666666">({</span></span>
<span class="line"><span style="color:#B8A965">      </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">type</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">"</span><span style="color:#666666">></span></code></span>type</span></span><span style="color:#666666">: </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">constant</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>(</span><span style="color:#BD976A">value</span><span style="color:#DBD7CAEE">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">"</span><span style="color:#666666">)</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">"</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Accepts only the given constant value.</div></span>constant</span></span><span style="color:#666666">(</span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">'</span><span style="color:#666666">),</span></span>
<span class="line"><span style="color:#758575DD">      // no composability; have to repeat</span></span>
<span class="line"><span style="color:#B8A965">      </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">name</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">string</span><span style="color:#666666">></span></code></span>name</span></span><span style="color:#666666">: </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">nonEmptyStringDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">></span></code></span>nonEmptyStringDecoder</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#666666">    }),</span></span>
<span class="line"><span style="color:#666666">  })</span></span>
<span class="line"><span style="color:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">fileSystemDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">></span></code></span>fileSystemDecoder</span></span><span style="color:#666666">: </span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">interface</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">></span></code></span>Decoder</span></span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">type</span><span style="color:#5DA994"> FileSystem</span><span style="color:#666666"> =</span><span style="color:#666666"> ({</span></span>
<span class="line"><span style="color:#CB7676">    readonly</span><span style="color:#BD976A"> type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">'</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#CB7676">    readonly</span><span style="color:#BD976A"> children</span><span style="color:#666666">: </span><span style="color:#CB7676">readonly</span><span style="color:#5DA994"> FileSystem</span><span style="color:#666666">[];</span></span>
<span class="line"><span style="color:#666666">}</span><span style="color:#666666"> |</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#CB7676">    readonly</span><span style="color:#BD976A"> type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">'</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">})</span><span style="color:#666666"> &#x26;</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#CB7676">    readonly</span><span style="color:#BD976A"> name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}</span></span></code></pre></code></span>FileSystem</span></span><span style="color:#666666">> =</span><span style="color:#80A665"> </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#80A665">lazy</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    children</span><span style="color:#666666">: </span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">[];</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}</span><span style="color:#666666"> |</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}>(</span><span style="color:#80A665">decoderFn</span><span style="color:#666666">: () => </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    children</span><span style="color:#666666">: </span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">[];</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">} | {</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}>):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#DBD7CAEE">...</span><span style="color:#666666">></span></span></code></pre></code><div class="twoslash-popup-docs">Lazily evaluate the given decoder. This is useful to build self-referential
types for recursive data structures.</div></span>lazy</span></span><span style="color:#666666">(()</span><span style="color:#666666"> =></span></span>
<span class="line"><span style="color:#80A665">  </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#BD976A">either</span><span style="color:#666666">&#x3C;[</span><span style="color:#80A665">Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    children</span><span style="color:#666666">: </span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">[];</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}>,</span><span style="color:#80A665"> Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}>]>(</span><span style="color:#BD976A">decoders_0</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    children</span><span style="color:#666666">: </span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">[];</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}>,</span><span style="color:#BD976A"> decoders_1</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;...>):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#DBD7CAEE">...</span><span style="color:#666666">></span></span></code></pre></code><div class="twoslash-popup-docs">Accepts values accepted by any of the given decoders.

The decoders are tried on the input one by one, in the given order. The
first one that accepts the input "wins". If all decoders reject the input,
the input gets rejected.</div></span>either</span></span><span style="color:#666666">(</span></span>
<span class="line"><span style="color:#80A665">    </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#80A665">object</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    children</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">[]>;</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#666666">}>(</span><span style="color:#BD976A">decoders</span><span style="color:#666666">: {</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    children</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">[]>;</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;...>;</span></span>
<span class="line"><span style="color:#666666">}):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#DBD7CAEE">...</span><span style="color:#666666">></span><span style="color:#666666"> (</span><span style="color:#DBD7CAEE">+</span><span style="color:#4C9A91">1</span><span style="color:#5DA994"> overload</span><span style="color:#666666">)</span></span></code></pre></code><div class="twoslash-popup-docs">Accepts objects with fields matching the given decoders. Extra fields that
exist on the input object are ignored and will not be returned.</div></span>object</span></span><span style="color:#666666">({</span></span>
<span class="line"><span style="color:#B8A965">      </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">type</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">"</span><span style="color:#666666">></span></code></span>type</span></span><span style="color:#666666">: </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">constant</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>(</span><span style="color:#BD976A">value</span><span style="color:#DBD7CAEE">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">"</span><span style="color:#666666">)</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">"</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Accepts only the given constant value.</div></span>constant</span></span><span style="color:#666666">(</span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">directory</span><span style="color:#C98A7D99">'</span><span style="color:#666666">),</span></span>
<span class="line"><span style="color:#B8A965">      </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">children</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">FileSystem</span><span style="color:#666666">[]></span></code></span>children</span></span><span style="color:#666666">: </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">array</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">>(</span><span style="color:#BD976A">decoder</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">FileSystem</span><span style="color:#666666">>)</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">FileSystem</span><span style="color:#666666">[]></span></code><div class="twoslash-popup-docs">Accepts arrays of whatever the given decoder accepts.</div></span>array</span></span><span style="color:#666666">(</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">fileSystemDecoder0</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">></span></code></span>fileSystemDecoder0</span></span><span style="color:#666666">).</span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">FileSystem</span><span style="color:#666666">[]>.</span><span style="color:#80A665">refine</span><span style="color:#666666">(</span><span style="color:#BD976A">predicate</span><span style="color:#DBD7CAEE">: </span><span style="color:#666666">(</span><span style="color:#BD976A">value</span><span style="color:#666666">: </span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">[])</span><span style="color:#666666"> =></span><span style="color:#BD976A"> boolean</span><span style="color:#666666">,</span><span style="color:#BD976A"> msg</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">string</span><span style="color:#666666">)</span><span style="color:#DBD7CAEE">: </span><span style="color:#80A665">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">[]></span><span style="color:#666666"> (</span><span style="color:#CB7676">+</span><span style="color:#4C9A91">1</span><span style="color:#BD976A"> overload</span><span style="color:#666666">)</span></code><div class="twoslash-popup-docs">Build a new decoder from the the current one, with an extra acceptance
criterium.</div></span>refine</span></span><span style="color:#666666">(</span></span>
<span class="line"><span style="color:#666666">        (</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">a</span><span style="color:#666666">:</span><span style="color:#BD976A"> FileSystem</span><span style="color:#666666">[]</span></code></span>a</span></span><span style="color:#666666">) => </span><span style="color:#CB7676">new</span><span style="color:#80A665"> </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">var </span><span style="color:#BD976A">Set</span><span style="color:#666666">: </span><span style="color:#5DA994">SetConstructor</span></span>
<span class="line"><span style="color:#CB7676">new</span><span style="color:#666666"> &#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>(</span><span style="color:#BD976A">iterable</span><span style="color:#CB7676">?</span><span style="color:#666666">: </span><span style="color:#5DA994">Iterable</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">> | </span><span style="color:#CB7676">null</span><span style="color:#666666"> | </span><span style="color:#CB7676">undefined</span><span style="color:#666666">)</span><span style="color:#666666"> =></span><span style="color:#80A665"> Set</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">></span><span style="color:#666666"> (</span><span style="color:#CB7676">+</span><span style="color:#4C9A91">1</span><span style="color:#BD976A"> overload</span><span style="color:#666666">)</span></span></code></pre></code></span>Set</span></span><span style="color:#666666">(</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">a</span><span style="color:#666666">:</span><span style="color:#BD976A"> FileSystem</span><span style="color:#666666">[]</span></code></span>a</span></span><span style="color:#666666">.</span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#BD976A">Array</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">FileSystem</span><span style="color:#666666">>.</span><span style="color:#80A665">map</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>(</span><span style="color:#BD976A">callbackfn</span><span style="color:#DBD7CAEE">: </span><span style="color:#666666">(</span><span style="color:#BD976A">value</span><span style="color:#666666">: </span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">,</span><span style="color:#BD976A"> index</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">,</span><span style="color:#BD976A"> array</span><span style="color:#666666">: </span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">[])</span><span style="color:#666666"> =></span><span style="color:#BD976A"> string</span><span style="color:#666666">,</span><span style="color:#BD976A"> thisArg</span><span style="color:#CB7676">?:</span><span style="color:#BD976A"> any</span><span style="color:#666666">)</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">string</span><span style="color:#666666">[]</span></code><div class="twoslash-popup-docs">Calls a defined callback function on each element of an array, and returns an array that contains the results.</div><div class="twoslash-popup-docs twoslash-popup-docs-tags"><span class="twoslash-popup-docs-tag"><span class="twoslash-popup-docs-tag-name">@param</span><span class="twoslash-popup-docs-tag-value">callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.</span></span><span class="twoslash-popup-docs-tag"><span class="twoslash-popup-docs-tag-name">@param</span><span class="twoslash-popup-docs-tag-value">thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.</span></span></div></span>map</span></span><span style="color:#666666">((</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">f</span><span style="color:#666666">:</span><span style="color:#BD976A"> FileSystem</span></code></span>f</span></span><span style="color:#666666">) => </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">f</span><span style="color:#666666">:</span><span style="color:#BD976A"> FileSystem</span></code></span>f</span></span><span style="color:#666666">.</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">name</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span></code></span>name</span></span><span style="color:#666666">)).</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#BD976A">Set</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">T</span><span style="color:#666666">>.</span><span style="color:#BD976A">size</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">number</span></code><div class="twoslash-popup-docs twoslash-popup-docs-tags"><span class="twoslash-popup-docs-tag"><span class="twoslash-popup-docs-tag-name">@returns</span><span class="twoslash-popup-docs-tag-value">the number of (unique) elements in Set.</span></span></div></span>size</span></span><span style="color:#CB7676"> ===</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">a</span><span style="color:#666666">:</span><span style="color:#BD976A"> FileSystem</span><span style="color:#666666">[]</span></code></span>a</span></span><span style="color:#666666">.</span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#BD976A">Array</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">T</span><span style="color:#666666">>.</span><span style="color:#B8A965">length</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">number</span></code><div class="twoslash-popup-docs">Gets or sets the length of the array. This is a number one higher than the highest index in the array.</div></span>length</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#C98A7D99">        '</span><span style="color:#C98A7D">Expected unique names in the children</span><span style="color:#C98A7D99">'</span></span>
<span class="line"><span style="color:#666666">      ),</span></span>
<span class="line"><span style="color:#758575DD">      // no composability; have to repeat</span></span>
<span class="line"><span style="color:#B8A965">      </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">name</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">string</span><span style="color:#666666">></span></code></span>name</span></span><span style="color:#666666">: </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">nonEmptyStringDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">></span></code></span>nonEmptyStringDecoder</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#666666">    }),</span></span>
<span class="line"><span style="color:#80A665">    </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#80A665">object</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#666666">}>(</span><span style="color:#BD976A">decoders</span><span style="color:#666666">: {</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#666666">}):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}></span><span style="color:#666666"> (</span><span style="color:#DBD7CAEE">+</span><span style="color:#4C9A91">1</span><span style="color:#5DA994"> overload</span><span style="color:#666666">)</span></span></code></pre></code><div class="twoslash-popup-docs">Accepts objects with fields matching the given decoders. Extra fields that
exist on the input object are ignored and will not be returned.</div></span>object</span></span><span style="color:#666666">({</span></span>
<span class="line"><span style="color:#B8A965">      </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">type</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">"</span><span style="color:#666666">></span></code></span>type</span></span><span style="color:#666666">: </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">constant</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>(</span><span style="color:#BD976A">value</span><span style="color:#DBD7CAEE">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">"</span><span style="color:#666666">)</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">"</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Accepts only the given constant value.</div></span>constant</span></span><span style="color:#666666">(</span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">file</span><span style="color:#C98A7D99">'</span><span style="color:#666666">),</span></span>
<span class="line"><span style="color:#758575DD">      // no composability; have to repeat</span></span>
<span class="line"><span style="color:#B8A965">      </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">name</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">string</span><span style="color:#666666">></span></code></span>name</span></span><span style="color:#666666">: </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">nonEmptyStringDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">></span></code></span>nonEmptyStringDecoder</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#666666">    })</span></span>
<span class="line"><span style="color:#666666">  )</span></span>
<span class="line"><span style="color:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A">userDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    email</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    createdAt</span><span style="color:#666666">: </span><span style="color:#5DA994">Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    updatedAt</span><span style="color:#666666">: </span><span style="color:#5DA994">Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    subscription</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">free</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">pro</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">enterprise</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    stripeId</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    visits</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    favouriteColours</span><span style="color:#666666">: </span><span style="color:#5DA994">Set</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    profile</span><span style="color:#666666">: {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } | {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    };</span></span>
<span class="line"><span style="color:#80A665">    fileSystem</span><span style="color:#666666">: ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } &#x26; {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    }) | ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } &#x26; {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    });</span></span>
<span class="line"><span style="color:#666666">}></span></span></code></pre></code></span>userDecoder</span></span><span style="color:#666666"> =</span><span style="color:#80A665"> </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#80A665">object</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    email</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    createdAt</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">Date</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    updatedAt</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">Date</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    subscription</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">free</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">pro</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">enterprise</span><span style="color:#C98A7D99">"</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#666666">    ...</span><span style="color:#4C9A91"> 4</span><span style="color:#5DA994"> more</span><span style="color:#666666"> .</span><span style="color:#DBD7CAEE">..</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    fileSystem</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;...>;</span></span>
<span class="line"><span style="color:#666666">}>(</span><span style="color:#BD976A">decoders</span><span style="color:#666666">: {</span></span>
<span class="line"><span style="color:#666666">    ...;</span></span>
<span class="line"><span style="color:#666666">}):</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#DBD7CAEE">...</span><span style="color:#666666">></span><span style="color:#666666"> (</span><span style="color:#DBD7CAEE">+</span><span style="color:#4C9A91">1</span><span style="color:#5DA994"> overload</span><span style="color:#666666">)</span></span></code></pre></code><div class="twoslash-popup-docs">Accepts objects with fields matching the given decoders. Extra fields that
exist on the input object are ignored and will not be returned.</div></span>object</span></span><span style="color:#666666">({</span></span>
<span class="line"><span style="color:#B8A965">  </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">name</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">string</span><span style="color:#666666">></span></code></span>name</span></span><span style="color:#666666">: </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">nonEmptyStringDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">></span></code></span>nonEmptyStringDecoder</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#BD976A">  </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">email</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">string</span><span style="color:#666666">></span></code></span>email</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#B8A965">  </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">createdAt</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">Date</span><span style="color:#666666">></span></code></span>createdAt</span></span><span style="color:#666666">: </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">iso8601</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">Date</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Accepts [ISO8601](https://en.wikipedia.org/wiki/ISO_8601)-formatted strings,
returns them as \`Date\` instances.

This is very useful for working with dates in APIs: serialize them as
\`.toISOString()\` when sending, decode them with \`iso8601\` when receiving.</div></span>iso8601</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#B8A965">  </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">updatedAt</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">Date</span><span style="color:#666666">></span></code></span>updatedAt</span></span><span style="color:#666666">: </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">iso8601</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">Date</span><span style="color:#666666">></span></code><div class="twoslash-popup-docs">Accepts [ISO8601](https://en.wikipedia.org/wiki/ISO_8601)-formatted strings,
returns them as \`Date\` instances.

This is very useful for working with dates in APIs: serialize them as
\`.toISOString()\` when sending, decode them with \`iso8601\` when receiving.</div></span>iso8601</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#B8A965">  </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">subscription</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">free</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">pro</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">enterprise</span><span style="color:#C98A7D99">"</span><span style="color:#666666">></span></code></span>subscription</span></span><span style="color:#666666">: </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">subscriptionDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">free</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">pro</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">enterprise</span><span style="color:#C98A7D99">"</span><span style="color:#666666">></span></code></span>subscriptionDecoder</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#B8A965">  </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">stripeId</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">string</span><span style="color:#666666">></span></code></span>stripeId</span></span><span style="color:#666666">: </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">stripeIdDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">></span></code></span>stripeIdDecoder</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#B8A965">  </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">visits</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">number</span><span style="color:#666666">></span></code></span>visits</span></span><span style="color:#666666">: </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">nonNegativeIntegerDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">number</span><span style="color:#666666">></span></code></span>nonNegativeIntegerDecoder</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#B8A965">  </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">favouriteColours</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">Set</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">string</span><span style="color:#CB7676">>></span></code></span>favouriteColours</span></span><span style="color:#666666">: </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">favouriteColoursDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">Set</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>></span></code></span>favouriteColoursDecoder</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#758575DD">  // crashes on parsing</span></span>
<span class="line"><span style="color:#758575DD">  // profile: profileDecoder0,</span></span>
<span class="line"><span style="color:#B8A965">  </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#80A665">profile</span><span style="color:#666666">:</span><span style="color:#80A665"> Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    boughtTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}</span><span style="color:#666666"> |</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">artist</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    publishedTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}></span></span></code></pre></code></span>profile</span></span><span style="color:#666666">: </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A">profileDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">listener</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    boughtTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">} | {</span></span>
<span class="line"><span style="color:#BD976A">    type</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">artist</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    publishedTracks</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}></span></span></code></pre></code></span>profileDecoder</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#758575DD">  // crashes on parsing</span></span>
<span class="line"><span style="color:#758575DD">  // fileSystem: fileSystemDecoder0,</span></span>
<span class="line"><span style="color:#B8A965">  </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">fileSystem</span><span style="color:#666666">:</span><span style="color:#BD976A"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">FileSystem</span><span style="color:#666666">></span></code></span>fileSystem</span></span><span style="color:#666666">: </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#BD976A">fileSystemDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">FileSystem</span><span style="color:#666666">></span></code></span>fileSystemDecoder</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#758575DD">  // not composable</span></span>
<span class="line"><span style="color:#666666">}).</span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;{</span><span style="color:#80A665"> name</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span><span style="color:#666666">;</span><span style="color:#80A665"> email</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span><span style="color:#666666">;</span><span style="color:#80A665"> createdAt</span><span style="color:#666666">:</span><span style="color:#BD976A"> Date</span><span style="color:#666666">;</span><span style="color:#80A665"> updatedAt</span><span style="color:#666666">:</span><span style="color:#BD976A"> Date</span><span style="color:#666666">;</span><span style="color:#80A665"> subscription</span><span style="color:#666666">:</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">free</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">pro</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">enterprise</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span><span style="color:#80A665"> stripeId</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span><span style="color:#666666">;</span><span style="color:#80A665"> visits</span><span style="color:#666666">:</span><span style="color:#BD976A"> number</span><span style="color:#666666">;</span><span style="color:#80A665"> favouriteColours</span><span style="color:#666666">:</span><span style="color:#BD976A"> Set</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">string</span><span style="color:#666666">>;</span><span style="color:#80A665"> profile</span><span style="color:#666666">:</span><span style="color:#666666"> {</span><span style="color:#666666"> ...;</span><span style="color:#666666"> }</span><span style="color:#CB7676"> |</span><span style="color:#666666"> {</span><span style="color:#666666"> ...;</span><span style="color:#666666"> };</span><span style="color:#80A665"> fileSystem</span><span style="color:#666666">:</span><span style="color:#666666"> ({ ...; }</span><span style="color:#CB7676"> &#x26;</span><span style="color:#666666"> { ...; })</span><span style="color:#CB7676"> |</span><span style="color:#666666"> ({ ...; }</span><span style="color:#CB7676"> &#x26;</span><span style="color:#666666"> { ...; });</span><span style="color:#666666"> }>.</span><span style="color:#80A665">refine</span><span style="color:#666666">(</span><span style="color:#BD976A">predicate</span><span style="color:#DBD7CAEE">: </span><span style="color:#666666">(</span><span style="color:#BD976A">value</span><span style="color:#666666">: {</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    email</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    createdAt</span><span style="color:#666666">: </span><span style="color:#5DA994">Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    updatedAt</span><span style="color:#666666">: </span><span style="color:#5DA994">Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    subscription</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">free</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">pro</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">enterprise</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    stripeId</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    visits</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    favouriteColours</span><span style="color:#666666">: </span><span style="color:#5DA994">Set</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    profile</span><span style="color:#666666">: {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } | {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    };</span></span>
<span class="line"><span style="color:#80A665">    fileSystem</span><span style="color:#666666">: ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } &#x26; {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    }) | ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } &#x26; {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    });</span></span>
<span class="line"><span style="color:#666666">})</span><span style="color:#666666"> =></span><span style="color:#BD976A"> boolean</span><span style="color:#666666">,</span><span style="color:#BD976A"> msg</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">string</span><span style="color:#666666">)</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;...></span><span style="color:#666666"> (</span><span style="color:#CB7676">+</span><span style="color:#4C9A91">1</span><span style="color:#BD976A"> overload</span><span style="color:#666666">)</span></span></code></pre></code><div class="twoslash-popup-docs">Build a new decoder from the the current one, with an extra acceptance
criterium.</div></span>refine</span></span><span style="color:#666666">(</span></span>
<span class="line"><span style="color:#666666">  (</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#80A665">u</span><span style="color:#666666">:</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#80A665">    name</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    email</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    createdAt</span><span style="color:#666666">:</span><span style="color:#BD976A"> Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    updatedAt</span><span style="color:#666666">:</span><span style="color:#BD976A"> Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    subscription</span><span style="color:#666666">:</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">free</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">pro</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">enterprise</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    stripeId</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    visits</span><span style="color:#666666">:</span><span style="color:#BD976A"> number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    favouriteColours</span><span style="color:#666666">:</span><span style="color:#BD976A"> Set</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">string</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#80A665">    profile</span><span style="color:#666666">:</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    }</span><span style="color:#CB7676"> |</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    };</span></span>
<span class="line"><span style="color:#80A665">    fileSystem</span><span style="color:#666666">:</span><span style="color:#666666"> ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    }</span><span style="color:#CB7676"> &#x26;</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    })</span><span style="color:#CB7676"> |</span><span style="color:#666666"> ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    }</span><span style="color:#CB7676"> &#x26;</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    });</span></span>
<span class="line"><span style="color:#666666">}</span></span></code></pre></code></span>u</span></span><span style="color:#666666">)</span><span style="color:#666666"> =></span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#80A665">u</span><span style="color:#666666">:</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#80A665">    name</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    email</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    createdAt</span><span style="color:#666666">:</span><span style="color:#BD976A"> Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    updatedAt</span><span style="color:#666666">:</span><span style="color:#BD976A"> Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    subscription</span><span style="color:#666666">:</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">free</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">pro</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">enterprise</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    stripeId</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    visits</span><span style="color:#666666">:</span><span style="color:#BD976A"> number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    favouriteColours</span><span style="color:#666666">:</span><span style="color:#BD976A"> Set</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">string</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#80A665">    profile</span><span style="color:#666666">:</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    }</span><span style="color:#CB7676"> |</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    };</span></span>
<span class="line"><span style="color:#80A665">    fileSystem</span><span style="color:#666666">:</span><span style="color:#666666"> ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    }</span><span style="color:#CB7676"> &#x26;</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    })</span><span style="color:#CB7676"> |</span><span style="color:#666666"> ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    }</span><span style="color:#CB7676"> &#x26;</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    });</span></span>
<span class="line"><span style="color:#666666">}</span></span></code></pre></code></span>u</span></span><span style="color:#666666">.</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">createdAt</span><span style="color:#666666">:</span><span style="color:#BD976A"> Date</span></code></span>createdAt</span></span><span style="color:#666666"> &#x3C;=</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#80A665">u</span><span style="color:#666666">:</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#80A665">    name</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    email</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    createdAt</span><span style="color:#666666">:</span><span style="color:#BD976A"> Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    updatedAt</span><span style="color:#666666">:</span><span style="color:#BD976A"> Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    subscription</span><span style="color:#666666">:</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">free</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">pro</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">enterprise</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    stripeId</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    visits</span><span style="color:#666666">:</span><span style="color:#BD976A"> number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    favouriteColours</span><span style="color:#666666">:</span><span style="color:#BD976A"> Set</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">string</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#80A665">    profile</span><span style="color:#666666">:</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    }</span><span style="color:#CB7676"> |</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    };</span></span>
<span class="line"><span style="color:#80A665">    fileSystem</span><span style="color:#666666">:</span><span style="color:#666666"> ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    }</span><span style="color:#CB7676"> &#x26;</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    })</span><span style="color:#CB7676"> |</span><span style="color:#666666"> ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    }</span><span style="color:#CB7676"> &#x26;</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    });</span></span>
<span class="line"><span style="color:#666666">}</span></span></code></pre></code></span>u</span></span><span style="color:#666666">.</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">updatedAt</span><span style="color:#666666">:</span><span style="color:#BD976A"> Date</span></code></span>updatedAt</span></span><span style="color:#666666">,</span></span>
<span class="line"><span style="color:#C98A7D99">  '</span><span style="color:#C98A7D">createdAt must be less or equal than updatedAt</span><span style="color:#C98A7D99">'</span></span>
<span class="line"><span style="color:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676">type</span><span style="color:#5DA994"> </span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">type</span><span style="color:#5DA994"> User</span><span style="color:#666666"> =</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    email</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    createdAt</span><span style="color:#666666">: </span><span style="color:#5DA994">Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    updatedAt</span><span style="color:#666666">: </span><span style="color:#5DA994">Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    subscription</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">free</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">pro</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">enterprise</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    stripeId</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    visits</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    favouriteColours</span><span style="color:#666666">: </span><span style="color:#5DA994">Set</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    profile</span><span style="color:#666666">: {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } | {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    };</span></span>
<span class="line"><span style="color:#80A665">    fileSystem</span><span style="color:#666666">: ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } &#x26; {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    }) | ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } &#x26; {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    });</span></span>
<span class="line"><span style="color:#666666">}</span></span></code></pre></code></span>User</span></span><span style="color:#666666"> =</span><span style="color:#5DA994"> </span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">type</span><span style="color:#5DA994"> DecoderType</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">D</span><span style="color:#CB7676"> extends</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">any</span><span style="color:#666666">>></span><span style="color:#666666"> =</span><span style="color:#5DA994"> D</span><span style="color:#CB7676"> extends</span><span style="color:#5DA994"> Decoder</span><span style="color:#666666">&#x3C;</span><span style="color:#CB7676">infer</span><span style="color:#5DA994"> T</span><span style="color:#666666">></span><span style="color:#CB7676"> ?</span><span style="color:#5DA994"> T</span><span style="color:#CB7676"> :</span><span style="color:#5DA994"> never</span></code><div class="twoslash-popup-docs">Helper type to return the output type of a Decoder.
Itâ€™s the inverse of Decoder&#x3C;T>.

You can use it at the type level:

  DecoderType&#x3C;Decoder&#x3C;string>>    // string
  DecoderType&#x3C;Decoder&#x3C;number[]>>  // number[]

Or on decoder instances, by using the \`typeof\` keyword:

  DecoderType&#x3C;typeof string>      // string
  DecoderType&#x3C;typeof truthy>      // boolean</div></span>DecoderType</span></span><span style="color:#666666">&#x3C;</span><span style="color:#CB7676">typeof</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A">userDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    email</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    createdAt</span><span style="color:#666666">: </span><span style="color:#5DA994">Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    updatedAt</span><span style="color:#666666">: </span><span style="color:#5DA994">Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    subscription</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">free</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">pro</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">enterprise</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    stripeId</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    visits</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    favouriteColours</span><span style="color:#666666">: </span><span style="color:#5DA994">Set</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    profile</span><span style="color:#666666">: {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } | {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    };</span></span>
<span class="line"><span style="color:#80A665">    fileSystem</span><span style="color:#666666">: ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } &#x26; {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    }) | ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } &#x26; {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    });</span></span>
<span class="line"><span style="color:#666666">}></span></span></code></pre></code></span>userDecoder</span></span><span style="color:#666666">>;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375">export</span><span style="color:#CB7676"> const </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#80A665">decodeUser</span><span style="color:#666666">: (</span><span style="color:#BD976A">u</span><span style="color:#666666">: </span><span style="color:#5DA994">unknown</span><span style="color:#666666">) => </span><span style="color:#5DA994">Result</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">, </span><span style="color:#5DA994">User</span><span style="color:#666666">></span></code></span>decodeUser</span></span><span style="color:#666666"> =</span><span style="color:#666666"> (</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">u</span><span style="color:#666666">:</span><span style="color:#BD976A"> unknown</span></code></span>u</span></span><span style="color:#666666">: </span><span style="color:#5DA994">unknown</span><span style="color:#666666">):</span><span style="color:#5DA994"> </span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">type</span><span style="color:#5DA994"> Result</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">E</span><span style="color:#666666">,</span><span style="color:#5DA994"> T</span><span style="color:#666666">></span><span style="color:#666666"> =</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#BD976A">    _tag</span><span style="color:#666666">: </span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">left</span><span style="color:#C98A7D99">'</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    error</span><span style="color:#666666">: </span><span style="color:#5DA994">E</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}</span><span style="color:#666666"> |</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#BD976A">    _tag</span><span style="color:#666666">: </span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">right</span><span style="color:#C98A7D99">'</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    value</span><span style="color:#666666">: </span><span style="color:#5DA994">T</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}</span></span></code></pre></code></span>Result</span></span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">,</span><span style="color:#5DA994"> </span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">type</span><span style="color:#5DA994"> User</span><span style="color:#666666"> =</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    email</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    createdAt</span><span style="color:#666666">: </span><span style="color:#5DA994">Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    updatedAt</span><span style="color:#666666">: </span><span style="color:#5DA994">Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    subscription</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">free</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">pro</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">enterprise</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    stripeId</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    visits</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    favouriteColours</span><span style="color:#666666">: </span><span style="color:#5DA994">Set</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    profile</span><span style="color:#666666">: {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } | {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    };</span></span>
<span class="line"><span style="color:#80A665">    fileSystem</span><span style="color:#666666">: ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } &#x26; {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    }) | ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } &#x26; {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    });</span></span>
<span class="line"><span style="color:#666666">}</span></span></code></pre></code></span>User</span></span><span style="color:#666666">></span><span style="color:#666666"> =></span></span>
<span class="line"><span style="color:#80A665">  </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">const </span><span style="color:#80A665">mapResult</span><span style="color:#666666">: &#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    email</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    createdAt</span><span style="color:#666666">: </span><span style="color:#5DA994">Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    updatedAt</span><span style="color:#666666">: </span><span style="color:#5DA994">Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    subscription</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">free</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">pro</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">enterprise</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    stripeId</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    visits</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    favouriteColours</span><span style="color:#666666">: </span><span style="color:#5DA994">Set</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    profile</span><span style="color:#666666">: {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } | {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    };</span></span>
<span class="line"><span style="color:#80A665">    fileSystem</span><span style="color:#666666">: ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } &#x26; {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    }) | ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } &#x26; {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    });</span></span>
<span class="line"><span style="color:#666666">}>(</span><span style="color:#BD976A">r</span><span style="color:#666666">: </span><span style="color:#5DA994">DecodeResult</span><span style="color:#666666">&#x3C;...>) => </span><span style="color:#5DA994">Result</span><span style="color:#666666">&#x3C;...></span></span></code></pre></code></span>mapResult</span></span><span style="color:#666666">(</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">const </span><span style="color:#BD976A">userDecoder</span><span style="color:#666666">: </span><span style="color:#5DA994">Decoder</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    email</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    createdAt</span><span style="color:#666666">: </span><span style="color:#5DA994">Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    updatedAt</span><span style="color:#666666">: </span><span style="color:#5DA994">Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    subscription</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">free</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">pro</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">enterprise</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    stripeId</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    visits</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    favouriteColours</span><span style="color:#666666">: </span><span style="color:#5DA994">Set</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    profile</span><span style="color:#666666">: {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } | {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    };</span></span>
<span class="line"><span style="color:#80A665">    fileSystem</span><span style="color:#666666">: ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } &#x26; {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    }) | ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } &#x26; {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    });</span></span>
<span class="line"><span style="color:#666666">}></span></span></code></pre></code></span>userDecoder</span></span><span style="color:#666666">.</span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#BD976A">Decoder</span><span style="color:#666666">&#x3C;{</span><span style="color:#80A665"> name</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span><span style="color:#666666">;</span><span style="color:#80A665"> email</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span><span style="color:#666666">;</span><span style="color:#80A665"> createdAt</span><span style="color:#666666">:</span><span style="color:#BD976A"> Date</span><span style="color:#666666">;</span><span style="color:#80A665"> updatedAt</span><span style="color:#666666">:</span><span style="color:#BD976A"> Date</span><span style="color:#666666">;</span><span style="color:#80A665"> subscription</span><span style="color:#666666">:</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">free</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">pro</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">enterprise</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span><span style="color:#80A665"> stripeId</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span><span style="color:#666666">;</span><span style="color:#80A665"> visits</span><span style="color:#666666">:</span><span style="color:#BD976A"> number</span><span style="color:#666666">;</span><span style="color:#80A665"> favouriteColours</span><span style="color:#666666">:</span><span style="color:#BD976A"> Set</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">string</span><span style="color:#666666">>;</span><span style="color:#80A665"> profile</span><span style="color:#666666">:</span><span style="color:#666666"> {</span><span style="color:#666666"> ...;</span><span style="color:#666666"> }</span><span style="color:#CB7676"> |</span><span style="color:#666666"> {</span><span style="color:#666666"> ...;</span><span style="color:#666666"> };</span><span style="color:#80A665"> fileSystem</span><span style="color:#666666">:</span><span style="color:#666666"> ({ ...; }</span><span style="color:#CB7676"> &#x26;</span><span style="color:#666666"> { ...; })</span><span style="color:#CB7676"> |</span><span style="color:#666666"> ({ ...; }</span><span style="color:#CB7676"> &#x26;</span><span style="color:#666666"> { ...; });</span><span style="color:#666666"> }>.</span><span style="color:#80A665">decode</span><span style="color:#666666">(</span><span style="color:#BD976A">blob</span><span style="color:#DBD7CAEE">: </span><span style="color:#BD976A">unknown</span><span style="color:#666666">)</span><span style="color:#DBD7CAEE">: </span><span style="color:#80A665">DecodeResult</span><span style="color:#666666">&#x3C;{</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    email</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    createdAt</span><span style="color:#666666">: </span><span style="color:#5DA994">Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    updatedAt</span><span style="color:#666666">: </span><span style="color:#5DA994">Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    subscription</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">free</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">pro</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">enterprise</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    stripeId</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    visits</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    favouriteColours</span><span style="color:#666666">: </span><span style="color:#5DA994">Set</span><span style="color:#666666">&#x3C;...>;</span></span>
<span class="line"><span style="color:#BD976A">    profile</span><span style="color:#666666">: {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } | {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    };</span></span>
<span class="line"><span style="color:#80A665">    fileSystem</span><span style="color:#666666">: ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } &#x26; {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    }) | ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } &#x26; {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    });</span></span>
<span class="line"><span style="color:#666666">}></span></span></code></pre></code><div class="twoslash-popup-docs">Verifies untrusted input. Always returns a DecodeResult, which is either
an "ok" value or an "error" annotation.</div></span>decode</span></span><span style="color:#666666">(</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">u</span><span style="color:#666666">:</span><span style="color:#BD976A"> unknown</span></code></span>u</span></span><span style="color:#666666">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375">export</span><span style="color:#CB7676"> const </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#80A665">encodeUser</span><span style="color:#666666">: (</span><span style="color:#BD976A">_u</span><span style="color:#666666">: </span><span style="color:#5DA994">User</span><span style="color:#666666">) => </span><span style="color:#5DA994">Result</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">unknown</span><span style="color:#666666">, </span><span style="color:#5DA994">unknown</span><span style="color:#666666">></span></code></span>encodeUser</span></span><span style="color:#666666"> =</span><span style="color:#666666"> (</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#80A665">_u</span><span style="color:#666666">:</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#80A665">    name</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    email</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    createdAt</span><span style="color:#666666">:</span><span style="color:#BD976A"> Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    updatedAt</span><span style="color:#666666">:</span><span style="color:#BD976A"> Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    subscription</span><span style="color:#666666">:</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">free</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">pro</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">enterprise</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    stripeId</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    visits</span><span style="color:#666666">:</span><span style="color:#BD976A"> number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#80A665">    favouriteColours</span><span style="color:#666666">:</span><span style="color:#BD976A"> Set</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">string</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#80A665">    profile</span><span style="color:#666666">:</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    }</span><span style="color:#CB7676"> |</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    };</span></span>
<span class="line"><span style="color:#80A665">    fileSystem</span><span style="color:#666666">:</span><span style="color:#666666"> ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    }</span><span style="color:#CB7676"> &#x26;</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    })</span><span style="color:#CB7676"> |</span><span style="color:#666666"> ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    }</span><span style="color:#CB7676"> &#x26;</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    });</span></span>
<span class="line"><span style="color:#666666">}</span></span></code></pre></code></span>_u</span></span><span style="color:#666666">: </span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">type</span><span style="color:#5DA994"> User</span><span style="color:#666666"> =</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#BD976A">    name</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    email</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    createdAt</span><span style="color:#666666">: </span><span style="color:#5DA994">Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    updatedAt</span><span style="color:#666666">: </span><span style="color:#5DA994">Date</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    subscription</span><span style="color:#666666">: </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">free</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">pro</span><span style="color:#C98A7D99">"</span><span style="color:#666666"> | </span><span style="color:#C98A7D99">"</span><span style="color:#C98A7D">enterprise</span><span style="color:#C98A7D99">"</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    stripeId</span><span style="color:#666666">: </span><span style="color:#5DA994">string</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    visits</span><span style="color:#666666">: </span><span style="color:#5DA994">number</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    favouriteColours</span><span style="color:#666666">: </span><span style="color:#5DA994">Set</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">>;</span></span>
<span class="line"><span style="color:#BD976A">    profile</span><span style="color:#666666">: {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } | {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    };</span></span>
<span class="line"><span style="color:#80A665">    fileSystem</span><span style="color:#666666">: ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } &#x26; {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    }) | ({</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    } &#x26; {</span></span>
<span class="line"><span style="color:#666666">        ...;</span></span>
<span class="line"><span style="color:#666666">    });</span></span>
<span class="line"><span style="color:#666666">}</span></span></code></pre></code></span>User</span></span><span style="color:#666666">):</span><span style="color:#5DA994"> </span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">type</span><span style="color:#5DA994"> Result</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">E</span><span style="color:#666666">,</span><span style="color:#5DA994"> T</span><span style="color:#666666">></span><span style="color:#666666"> =</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#BD976A">    _tag</span><span style="color:#666666">: </span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">left</span><span style="color:#C98A7D99">'</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    error</span><span style="color:#666666">: </span><span style="color:#5DA994">E</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}</span><span style="color:#666666"> |</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#BD976A">    _tag</span><span style="color:#666666">: </span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">right</span><span style="color:#C98A7D99">'</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    value</span><span style="color:#666666">: </span><span style="color:#5DA994">T</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}</span></span></code></pre></code></span>Result</span></span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">unknown</span><span style="color:#666666">,</span><span style="color:#5DA994"> unknown</span><span style="color:#666666">></span><span style="color:#666666"> =></span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#4D9375">  return</span><span style="color:#666666"> { </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">_tag</span><span style="color:#666666">:</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">left</span><span style="color:#C98A7D99">"</span></code></span>_tag</span></span><span style="color:#666666">: </span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">left</span><span style="color:#C98A7D99">'</span><span style="color:#666666">, </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">error</span><span style="color:#666666">:</span><span style="color:#BD976A"> unknown</span></code></span>error</span></span><span style="color:#666666">: </span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">the lib cannot do it</span><span style="color:#C98A7D99">'</span><span style="color:#666666"> };</span></span>
<span class="line"><span style="color:#666666">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD">// utils</span></span>
<span class="line"><span style="color:#CB7676">const </span><span style="color:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">const </span><span style="color:#80A665">mapResult</span><span style="color:#666666">: &#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>(</span><span style="color:#BD976A">r</span><span style="color:#666666">: </span><span style="color:#5DA994">DecodeResult</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>) => </span><span style="color:#5DA994">Result</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">, </span><span style="color:#5DA994">T</span><span style="color:#666666">></span></code></span>mapResult</span></span><span style="color:#666666"> =</span><span style="color:#666666"> &#x3C;</span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">function</span><span style="color:#666666"> (</span><span style="color:#BD976A">type</span><span style="color:#BD976A"> parameter</span><span style="color:#666666">)</span><span style="color:#80A665"> T</span><span style="color:#80A665"> in</span><span style="color:#666666"> &#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>(</span><span style="color:#BD976A">r</span><span style="color:#666666">: </span><span style="color:#5DA994">DecodeResult</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>):</span><span style="color:#5DA994"> Result</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">,</span><span style="color:#5DA994"> T</span><span style="color:#666666">></span></code></span>T</span></span><span style="color:#666666">>(</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">r</span><span style="color:#666666">:</span><span style="color:#BD976A"> DecodeResult</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">T</span><span style="color:#666666">></span></code></span>r</span></span><span style="color:#666666">: </span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">type</span><span style="color:#5DA994"> DecodeResult</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">></span><span style="color:#666666"> =</span><span style="color:#5DA994"> Ok</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">></span><span style="color:#666666"> |</span><span style="color:#5DA994"> Err</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">Annotation</span><span style="color:#666666">></span></code></span>DecodeResult</span></span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">function</span><span style="color:#666666"> (</span><span style="color:#BD976A">type</span><span style="color:#BD976A"> parameter</span><span style="color:#666666">)</span><span style="color:#80A665"> T</span><span style="color:#80A665"> in</span><span style="color:#666666"> &#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>(</span><span style="color:#BD976A">r</span><span style="color:#666666">: </span><span style="color:#5DA994">DecodeResult</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>):</span><span style="color:#5DA994"> Result</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">,</span><span style="color:#5DA994"> T</span><span style="color:#666666">></span></code></span>T</span></span><span style="color:#666666">>):</span><span style="color:#5DA994"> </span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki vitesse-dark" style="background-color:#121212;color:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#CB7676">type</span><span style="color:#5DA994"> Result</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">E</span><span style="color:#666666">,</span><span style="color:#5DA994"> T</span><span style="color:#666666">></span><span style="color:#666666"> =</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#BD976A">    _tag</span><span style="color:#666666">: </span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">left</span><span style="color:#C98A7D99">'</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    error</span><span style="color:#666666">: </span><span style="color:#5DA994">E</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}</span><span style="color:#666666"> |</span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#BD976A">    _tag</span><span style="color:#666666">: </span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">right</span><span style="color:#C98A7D99">'</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#BD976A">    value</span><span style="color:#666666">: </span><span style="color:#5DA994">T</span><span style="color:#666666">;</span></span>
<span class="line"><span style="color:#666666">}</span></span></code></pre></code></span>Result</span></span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">,</span><span style="color:#5DA994"> </span><span style="color:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#CB7676">function</span><span style="color:#666666"> (</span><span style="color:#BD976A">type</span><span style="color:#BD976A"> parameter</span><span style="color:#666666">)</span><span style="color:#80A665"> T</span><span style="color:#80A665"> in</span><span style="color:#666666"> &#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>(</span><span style="color:#BD976A">r</span><span style="color:#666666">: </span><span style="color:#5DA994">DecodeResult</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">T</span><span style="color:#666666">>):</span><span style="color:#5DA994"> Result</span><span style="color:#666666">&#x3C;</span><span style="color:#5DA994">string</span><span style="color:#666666">,</span><span style="color:#5DA994"> T</span><span style="color:#666666">></span></code></span>T</span></span><span style="color:#666666">></span><span style="color:#666666"> =></span><span style="color:#666666"> {</span></span>
<span class="line"><span style="color:#758575DD">  // needed to runtime check the taggedUnion issue</span></span>
<span class="line"><span style="color:#758575DD">  // console.log(r);</span></span>
<span class="line"><span style="color:#4D9375">  return</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">r</span><span style="color:#666666">:</span><span style="color:#BD976A"> DecodeResult</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">T</span><span style="color:#666666">></span></code></span>r</span></span><span style="color:#666666">.</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#BD976A">error</span><span style="color:#CB7676">?:</span><span style="color:#BD976A"> Annotation</span><span style="color:#CB7676"> |</span><span style="color:#CB7676"> undefined</span></code></span>error</span></span></span>
<span class="line"><span style="color:#CB7676">    ? </span><span style="color:#666666">{ </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">_tag</span><span style="color:#666666">:</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">left</span><span style="color:#C98A7D99">"</span></code></span>_tag</span></span><span style="color:#666666">: </span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">left</span><span style="color:#C98A7D99">'</span><span style="color:#666666">, </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">error</span><span style="color:#666666">:</span><span style="color:#BD976A"> string</span></code></span>error</span></span><span style="color:#666666">: </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">r</span><span style="color:#666666">:</span><span style="color:#BD976A"> Err</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">Annotation</span><span style="color:#666666">></span></code></span>r</span></span><span style="color:#666666">.</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">error</span><span style="color:#666666">:</span><span style="color:#BD976A"> Annotation</span></code></span>error</span></span><span style="color:#666666">.</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#BD976A">text</span><span style="color:#CB7676">?:</span><span style="color:#BD976A"> string</span><span style="color:#CB7676"> |</span><span style="color:#CB7676"> undefined</span></code></span>text</span></span><span style="color:#CB7676"> ||</span><span style="color:#BD976A"> </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">r</span><span style="color:#666666">:</span><span style="color:#BD976A"> Err</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">Annotation</span><span style="color:#666666">></span></code></span>r</span></span><span style="color:#666666">.</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">error</span><span style="color:#666666">:</span><span style="color:#BD976A"> Annotation</span></code></span>error</span></span><span style="color:#666666">.</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">type</span><span style="color:#666666">:</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">object</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">array</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">scalar</span><span style="color:#C98A7D99">"</span><span style="color:#CB7676"> |</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">opaque</span><span style="color:#C98A7D99">"</span></code></span>type</span></span><span style="color:#666666"> }</span></span>
<span class="line"><span style="color:#CB7676">    :</span><span style="color:#666666"> { </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">_tag</span><span style="color:#666666">:</span><span style="color:#C98A7D99"> "</span><span style="color:#C98A7D">right</span><span style="color:#C98A7D99">"</span></code></span>_tag</span></span><span style="color:#666666">: </span><span style="color:#C98A7D99">'</span><span style="color:#C98A7D">right</span><span style="color:#C98A7D99">'</span><span style="color:#666666">, </span><span style="color:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">value</span><span style="color:#666666">:</span><span style="color:#BD976A"> T</span></code></span>value</span></span><span style="color:#666666">: </span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">r</span><span style="color:#666666">:</span><span style="color:#BD976A"> Ok</span><span style="color:#666666">&#x3C;</span><span style="color:#BD976A">T</span><span style="color:#666666">></span></code></span>r</span></span><span style="color:#666666">.</span><span style="color:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#80A665">value</span><span style="color:#666666">:</span><span style="color:#BD976A"> T</span></code></span>value</span></span><span style="color:#666666"> };</span></span>
<span class="line"><span style="color:#666666">};</span></span>
<span class="line"></span></code></pre>`,y=({isIframe:a})=>s.jsx("div",{children:s.jsx(n,{isIframe:a,code:c,encodeUser:p,decodeUser:o,validUser:l,meta:e,library:"decoders"})});export{y as DecodersPage};
